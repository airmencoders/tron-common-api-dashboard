/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExceptionResponse,
    ExceptionResponseFromJSON,
    ExceptionResponseToJSON,
    OrganizationDto,
    OrganizationDtoFromJSON,
    OrganizationDtoToJSON,
} from '../models';

export interface AddNewOrganizationsRequest {
    organizationDto: Array<OrganizationDto>;
}

export interface AddOrganizationMemberRequest {
    id: string;
    requestBody: Array<string>;
}

export interface CreateOrganizationRequest {
    organizationDto: OrganizationDto;
}

export interface DeleteOrganizationRequest {
    id: string;
}

export interface DeleteOrganizationMemberRequest {
    id: string;
    requestBody: Array<string>;
}

export interface GetOrganizationRequest {
    id: string;
}

export interface PatchOrganizationRequest {
    id: string;
    requestBody: { [key: string]: string; };
}

export interface UpdateOrganizationRequest {
    id: string;
    organizationDto: OrganizationDto;
}

/**
 * 
 */
export class OrganizationControllerApi extends runtime.BaseAPI {

    /**
     * Adds one or more organization entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * Adds one or more organization entities
     */
    async addNewOrganizationsRaw(requestParameters: AddNewOrganizationsRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.organizationDto === null || requestParameters.organizationDto === undefined) {
            throw new runtime.RequiredError('organizationDto','Required parameter requestParameters.organizationDto was null or undefined when calling addNewOrganizations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/organization/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.organizationDto.map(OrganizationDtoToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Adds one or more organization entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * Adds one or more organization entities
     */
    async addNewOrganizations(requestParameters: AddNewOrganizationsRequest): Promise<OrganizationDto> {
        const response = await this.addNewOrganizationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds member(s) to an organization
     * Add member(s) to an organization
     */
    async addOrganizationMemberRaw(requestParameters: AddOrganizationMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addOrganizationMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling addOrganizationMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/organization/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds member(s) to an organization
     * Add member(s) to an organization
     */
    async addOrganizationMember(requestParameters: AddOrganizationMemberRequest): Promise<void> {
        await this.addOrganizationMemberRaw(requestParameters);
    }

    /**
     * Adds an organization
     * Adds an organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.organizationDto === null || requestParameters.organizationDto === undefined) {
            throw new runtime.RequiredError('organizationDto','Required parameter requestParameters.organizationDto was null or undefined when calling createOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationDtoToJSON(requestParameters.organizationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Adds an organization
     * Adds an organization
     */
    async createOrganization(requestParameters: CreateOrganizationRequest): Promise<OrganizationDto> {
        const response = await this.createOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an existing organization
     * Deletes an existing organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing organization
     * Deletes an existing organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationRequest): Promise<void> {
        await this.deleteOrganizationRaw(requestParameters);
    }

    /**
     * Deletes a member(s) from an organization
     * Deletes a member(s) from the organization
     */
    async deleteOrganizationMemberRaw(requestParameters: DeleteOrganizationMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganizationMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling deleteOrganizationMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/organization/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a member(s) from an organization
     * Deletes a member(s) from the organization
     */
    async deleteOrganizationMember(requestParameters: DeleteOrganizationMemberRequest): Promise<void> {
        await this.deleteOrganizationMemberRaw(requestParameters);
    }

    /**
     * Retrieves an organization by ID
     * Retrieves an organization by ID
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves an organization by ID
     * Retrieves an organization by ID
     */
    async getOrganization(requestParameters: GetOrganizationRequest): Promise<OrganizationDto> {
        const response = await this.getOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves all organizations
     * Retrieves all organizations
     */
    async getOrganizationsRaw(): Promise<runtime.ApiResponse<OrganizationDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves all organizations
     * Retrieves all organizations
     */
    async getOrganizations(): Promise<OrganizationDto> {
        const response = await this.getOrganizationsRaw();
        return await response.value();
    }

    /**
     * Updates an existing organization\'s attributes
     * Updates an existing organization\'s attributes
     */
    async patchOrganizationRaw(requestParameters: PatchOrganizationRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchOrganization.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling patchOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Updates an existing organization\'s attributes
     * Updates an existing organization\'s attributes
     */
    async patchOrganization(requestParameters: PatchOrganizationRequest): Promise<OrganizationDto> {
        const response = await this.patchOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing organization
     * Updates an existing organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganization.');
        }

        if (requestParameters.organizationDto === null || requestParameters.organizationDto === undefined) {
            throw new runtime.RequiredError('organizationDto','Required parameter requestParameters.organizationDto was null or undefined when calling updateOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationDtoToJSON(requestParameters.organizationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Updates an existing organization
     * Updates an existing organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationRequest): Promise<OrganizationDto> {
        const response = await this.updateOrganizationRaw(requestParameters);
        return await response.value();
    }

}
