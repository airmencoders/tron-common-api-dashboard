/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { PubSubLedger } from '../models';
// @ts-ignore
import { Subscriber } from '../models';
/**
 * SubscriberControllerApi - axios parameter creator
 * @export
 */
export const SubscriberControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a subscription by its UUID
         * @summary Deletes a subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancelSubscription.');
            }
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new subscription, or updates an existing subscription
         * @summary Adds/updates a subscription
         * @param {Subscriber} subscriber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (subscriber: Subscriber, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriber' is not null or undefined
            if (subscriber === null || subscriber === undefined) {
                throw new RequiredError('subscriber','Required parameter subscriber was null or undefined when calling createSubscription.');
            }
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof subscriber !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(subscriber !== undefined ? subscriber : {})
                : (subscriber || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all subscriptions
         * @summary Retrieves all registered subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all ledger entries from specified date/time
         * @summary Retrieves all legder entries from specified date/time
         * @param {string} sinceDateTime 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventSinceDate: async (sinceDateTime: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sinceDateTime' is not null or undefined
            if (sinceDateTime === null || sinceDateTime === undefined) {
                throw new RequiredError('sinceDateTime','Required parameter sinceDateTime was null or undefined when calling getEventSinceDate.');
            }
            const localVarPath = `/v1/subscriptions/events/replay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sinceDateTime !== undefined) {
                localVarQueryParameter['sinceDateTime'] = (sinceDateTime as any instanceof Date) ?
                    (sinceDateTime as any).toISOString() :
                    sinceDateTime;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves latest counts for each event type in a key-value pair object
         * @summary Retrieves most current counts for each event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestCounts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/events/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a subscription by its UUID
         * @summary Retrieves a registered subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSubscription.');
            }
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriberControllerApi - functional programming interface
 * @export
 */
export const SubscriberControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a subscription by its UUID
         * @summary Deletes a subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscription(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriber>> {
            const localVarAxiosArgs = await SubscriberControllerApiAxiosParamCreator(configuration).cancelSubscription(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new subscription, or updates an existing subscription
         * @summary Adds/updates a subscription
         * @param {Subscriber} subscriber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(subscriber: Subscriber, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriber>> {
            const localVarAxiosArgs = await SubscriberControllerApiAxiosParamCreator(configuration).createSubscription(subscriber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all subscriptions
         * @summary Retrieves all registered subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubscriptions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subscriber>>> {
            const localVarAxiosArgs = await SubscriberControllerApiAxiosParamCreator(configuration).getAllSubscriptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all ledger entries from specified date/time
         * @summary Retrieves all legder entries from specified date/time
         * @param {string} sinceDateTime 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventSinceDate(sinceDateTime: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PubSubLedger>>> {
            const localVarAxiosArgs = await SubscriberControllerApiAxiosParamCreator(configuration).getEventSinceDate(sinceDateTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves latest counts for each event type in a key-value pair object
         * @summary Retrieves most current counts for each event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestCounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await SubscriberControllerApiAxiosParamCreator(configuration).getLatestCounts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a subscription by its UUID
         * @summary Retrieves a registered subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriber>> {
            const localVarAxiosArgs = await SubscriberControllerApiAxiosParamCreator(configuration).getSubscription(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubscriberControllerApi - factory interface
 * @export
 */
export const SubscriberControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a subscription by its UUID
         * @summary Deletes a subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(id: string, options?: any): AxiosPromise<Subscriber> {
            return SubscriberControllerApiFp(configuration).cancelSubscription(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new subscription, or updates an existing subscription
         * @summary Adds/updates a subscription
         * @param {Subscriber} subscriber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(subscriber: Subscriber, options?: any): AxiosPromise<Subscriber> {
            return SubscriberControllerApiFp(configuration).createSubscription(subscriber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all subscriptions
         * @summary Retrieves all registered subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptions(options?: any): AxiosPromise<Array<Subscriber>> {
            return SubscriberControllerApiFp(configuration).getAllSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all ledger entries from specified date/time
         * @summary Retrieves all legder entries from specified date/time
         * @param {string} sinceDateTime 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventSinceDate(sinceDateTime: string, options?: any): AxiosPromise<Array<PubSubLedger>> {
            return SubscriberControllerApiFp(configuration).getEventSinceDate(sinceDateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves latest counts for each event type in a key-value pair object
         * @summary Retrieves most current counts for each event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestCounts(options?: any): AxiosPromise<string> {
            return SubscriberControllerApiFp(configuration).getLatestCounts(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a subscription by its UUID
         * @summary Retrieves a registered subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(id: string, options?: any): AxiosPromise<Subscriber> {
            return SubscriberControllerApiFp(configuration).getSubscription(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriberControllerApi - interface
 * @export
 * @interface SubscriberControllerApi
 */
export interface SubscriberControllerApiInterface {
    /**
     * Deletes a subscription by its UUID
     * @summary Deletes a subscription
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApiInterface
     */
    cancelSubscription(id: string, options?: any): AxiosPromise<Subscriber>;

    /**
     * Adds a new subscription, or updates an existing subscription
     * @summary Adds/updates a subscription
     * @param {Subscriber} subscriber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApiInterface
     */
    createSubscription(subscriber: Subscriber, options?: any): AxiosPromise<Subscriber>;

    /**
     * Retrieves all subscriptions
     * @summary Retrieves all registered subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApiInterface
     */
    getAllSubscriptions(options?: any): AxiosPromise<Array<Subscriber>>;

    /**
     * Retrieves all ledger entries from specified date/time
     * @summary Retrieves all legder entries from specified date/time
     * @param {string} sinceDateTime 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApiInterface
     */
    getEventSinceDate(sinceDateTime: string, options?: any): AxiosPromise<Array<PubSubLedger>>;

    /**
     * Retrieves latest counts for each event type in a key-value pair object
     * @summary Retrieves most current counts for each event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApiInterface
     */
    getLatestCounts(options?: any): AxiosPromise<string>;

    /**
     * Retrieve a subscription by its UUID
     * @summary Retrieves a registered subscription
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApiInterface
     */
    getSubscription(id: string, options?: any): AxiosPromise<Subscriber>;

}

/**
 * SubscriberControllerApi - object-oriented interface
 * @export
 * @class SubscriberControllerApi
 * @extends {BaseAPI}
 */
export class SubscriberControllerApi extends BaseAPI implements SubscriberControllerApiInterface {
    /**
     * Deletes a subscription by its UUID
     * @summary Deletes a subscription
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApi
     */
    public cancelSubscription(id: string, options?: any) {
        return SubscriberControllerApiFp(this.configuration).cancelSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new subscription, or updates an existing subscription
     * @summary Adds/updates a subscription
     * @param {Subscriber} subscriber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApi
     */
    public createSubscription(subscriber: Subscriber, options?: any) {
        return SubscriberControllerApiFp(this.configuration).createSubscription(subscriber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all subscriptions
     * @summary Retrieves all registered subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApi
     */
    public getAllSubscriptions(options?: any) {
        return SubscriberControllerApiFp(this.configuration).getAllSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all ledger entries from specified date/time
     * @summary Retrieves all legder entries from specified date/time
     * @param {string} sinceDateTime 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApi
     */
    public getEventSinceDate(sinceDateTime: string, options?: any) {
        return SubscriberControllerApiFp(this.configuration).getEventSinceDate(sinceDateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves latest counts for each event type in a key-value pair object
     * @summary Retrieves most current counts for each event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApi
     */
    public getLatestCounts(options?: any) {
        return SubscriberControllerApiFp(this.configuration).getLatestCounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a subscription by its UUID
     * @summary Retrieves a registered subscription
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberControllerApi
     */
    public getSubscription(id: string, options?: any) {
        return SubscriberControllerApiFp(this.configuration).getSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }
}
