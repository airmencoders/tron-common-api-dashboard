/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppSourceErrorResponseDto } from '../models';
// @ts-ignore
import { AppSourceUsageResponseDto } from '../models';
// @ts-ignore
import { EntityAccessorResponseDto } from '../models';
// @ts-ignore
import { ExceptionResponse } from '../models';
/**
 * DashboardControllerApi - axios parameter creator
 * @export
 */
export const DashboardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of App Clients that have accessed organization records between two dates with their request count. Will only include App Clients that have made successful requests to access organization records (http status between 200 and 300.)
         * @summary Get a list of App Clients that have accessed organization records
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppClientsAccessingOrganizations: async (startDate: string, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getAppClientsAccessingOrganizations.');
            }
            const localVarPath = `/v2/dashboard/app-client-organization-accessors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of App Sources along with their respective error request counts between two dates. Will only include successful requests (http status between 200 and 300)
         * @summary Get a list of App Sources along with their respective error request count.
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourceErrorUsageCount: async (startDate: string, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getAppSourceErrorUsageCount.');
            }
            const localVarPath = `/v2/dashboard/app-source-error-usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of App Sources along with their respective request counts between two dates. Will only include successful requests (http status between 200 and 300)
         * @summary Get a list of App Sources along with their respective request count.
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourceUsageCount: async (startDate: string, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getAppSourceUsageCount.');
            }
            const localVarPath = `/v2/dashboard/app-source-usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardControllerApi - functional programming interface
 * @export
 */
export const DashboardControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of App Clients that have accessed organization records between two dates with their request count. Will only include App Clients that have made successful requests to access organization records (http status between 200 and 300.)
         * @summary Get a list of App Clients that have accessed organization records
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppClientsAccessingOrganizations(startDate: string, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityAccessorResponseDto>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).getAppClientsAccessingOrganizations(startDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of App Sources along with their respective error request counts between two dates. Will only include successful requests (http status between 200 and 300)
         * @summary Get a list of App Sources along with their respective error request count.
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppSourceErrorUsageCount(startDate: string, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceErrorResponseDto>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).getAppSourceErrorUsageCount(startDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of App Sources along with their respective request counts between two dates. Will only include successful requests (http status between 200 and 300)
         * @summary Get a list of App Sources along with their respective request count.
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppSourceUsageCount(startDate: string, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceUsageResponseDto>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).getAppSourceUsageCount(startDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DashboardControllerApi - factory interface
 * @export
 */
export const DashboardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of App Clients that have accessed organization records between two dates with their request count. Will only include App Clients that have made successful requests to access organization records (http status between 200 and 300.)
         * @summary Get a list of App Clients that have accessed organization records
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppClientsAccessingOrganizations(startDate: string, endDate?: string, options?: any): AxiosPromise<EntityAccessorResponseDto> {
            return DashboardControllerApiFp(configuration).getAppClientsAccessingOrganizations(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of App Sources along with their respective error request counts between two dates. Will only include successful requests (http status between 200 and 300)
         * @summary Get a list of App Sources along with their respective error request count.
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourceErrorUsageCount(startDate: string, endDate?: string, options?: any): AxiosPromise<AppSourceErrorResponseDto> {
            return DashboardControllerApiFp(configuration).getAppSourceErrorUsageCount(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of App Sources along with their respective request counts between two dates. Will only include successful requests (http status between 200 and 300)
         * @summary Get a list of App Sources along with their respective request count.
         * @param {string} startDate Earliest date to include in UTC.
         * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourceUsageCount(startDate: string, endDate?: string, options?: any): AxiosPromise<AppSourceUsageResponseDto> {
            return DashboardControllerApiFp(configuration).getAppSourceUsageCount(startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardControllerApi - interface
 * @export
 * @interface DashboardControllerApi
 */
export interface DashboardControllerApiInterface {
    /**
     * Get a list of App Clients that have accessed organization records between two dates with their request count. Will only include App Clients that have made successful requests to access organization records (http status between 200 and 300.)
     * @summary Get a list of App Clients that have accessed organization records
     * @param {string} startDate Earliest date to include in UTC.
     * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApiInterface
     */
    getAppClientsAccessingOrganizations(startDate: string, endDate?: string, options?: any): AxiosPromise<EntityAccessorResponseDto>;

    /**
     * Get a list of App Sources along with their respective error request counts between two dates. Will only include successful requests (http status between 200 and 300)
     * @summary Get a list of App Sources along with their respective error request count.
     * @param {string} startDate Earliest date to include in UTC.
     * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApiInterface
     */
    getAppSourceErrorUsageCount(startDate: string, endDate?: string, options?: any): AxiosPromise<AppSourceErrorResponseDto>;

    /**
     * Get a list of App Sources along with their respective request counts between two dates. Will only include successful requests (http status between 200 and 300)
     * @summary Get a list of App Sources along with their respective request count.
     * @param {string} startDate Earliest date to include in UTC.
     * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApiInterface
     */
    getAppSourceUsageCount(startDate: string, endDate?: string, options?: any): AxiosPromise<AppSourceUsageResponseDto>;

}

/**
 * DashboardControllerApi - object-oriented interface
 * @export
 * @class DashboardControllerApi
 * @extends {BaseAPI}
 */
export class DashboardControllerApi extends BaseAPI implements DashboardControllerApiInterface {
    /**
     * Get a list of App Clients that have accessed organization records between two dates with their request count. Will only include App Clients that have made successful requests to access organization records (http status between 200 and 300.)
     * @summary Get a list of App Clients that have accessed organization records
     * @param {string} startDate Earliest date to include in UTC.
     * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public getAppClientsAccessingOrganizations(startDate: string, endDate?: string, options?: any) {
        return DashboardControllerApiFp(this.configuration).getAppClientsAccessingOrganizations(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of App Sources along with their respective error request counts between two dates. Will only include successful requests (http status between 200 and 300)
     * @summary Get a list of App Sources along with their respective error request count.
     * @param {string} startDate Earliest date to include in UTC.
     * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public getAppSourceErrorUsageCount(startDate: string, endDate?: string, options?: any) {
        return DashboardControllerApiFp(this.configuration).getAppSourceErrorUsageCount(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of App Sources along with their respective request counts between two dates. Will only include successful requests (http status between 200 and 300)
     * @summary Get a list of App Sources along with their respective request count.
     * @param {string} startDate Earliest date to include in UTC.
     * @param {string} [endDate] Latest date to include in UTC. Will default to the current date if not provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public getAppSourceUsageCount(startDate: string, endDate?: string, options?: any) {
        return DashboardControllerApiFp(this.configuration).getAppSourceUsageCount(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}
