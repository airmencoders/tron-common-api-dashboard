/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppClientSummaryDtoResponseWrapper } from '../models';
// @ts-ignore
import { AppEndPointPrivDto } from '../models';
// @ts-ignore
import { AppSourceDetailsDto } from '../models';
// @ts-ignore
import { AppSourceDtoResponseWrapper } from '../models';
// @ts-ignore
import { DashboardUserDto } from '../models';
// @ts-ignore
import { ExceptionResponse } from '../models';
/**
 * AppSourceControllerApi - axios parameter creator
 * @export
 */
export const AppSourceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
         * @summary Adds single app source admin by email address to provided App Source
         * @param {string} id App Source UUID
         * @param {DashboardUserDto} dashboardUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppSourceAdmin: async (id: string, dashboardUserDto: DashboardUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addAppSourceAdmin.');
            }
            // verify required parameter 'dashboardUserDto' is not null or undefined
            if (dashboardUserDto === null || dashboardUserDto === undefined) {
                throw new RequiredError('dashboardUserDto','Required parameter dashboardUserDto was null or undefined when calling addAppSourceAdmin.');
            }
            const localVarPath = `/v2/app-source/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof dashboardUserDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(dashboardUserDto !== undefined ? dashboardUserDto : {})
                : (dashboardUserDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Adds an app source\'s endpoint to app client privilege relationship
         * @param {AppEndPointPrivDto} appEndPointPrivDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientToEndpointPriv: async (appEndPointPrivDto: AppEndPointPrivDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appEndPointPrivDto' is not null or undefined
            if (appEndPointPrivDto === null || appEndPointPrivDto === undefined) {
                throw new RequiredError('appEndPointPrivDto','Required parameter appEndPointPrivDto was null or undefined when calling addClientToEndpointPriv.');
            }
            const localVarPath = `/v2/app-source/app-clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof appEndPointPrivDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(appEndPointPrivDto !== undefined ? appEndPointPrivDto : {})
                : (appEndPointPrivDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires DASHBOARD_ADMIN rights
         * @summary Creates an App Source including App Client permissions.
         * @param {AppSourceDetailsDto} appSourceDetailsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppSource: async (appSourceDetailsDto: AppSourceDetailsDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appSourceDetailsDto' is not null or undefined
            if (appSourceDetailsDto === null || appSourceDetailsDto === undefined) {
                throw new RequiredError('appSourceDetailsDto','Required parameter appSourceDetailsDto was null or undefined when calling createAppSource.');
            }
            const localVarPath = `/v2/app-source`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof appSourceDetailsDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(appSourceDetailsDto !== undefined ? appSourceDetailsDto : {})
                : (appSourceDetailsDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes the App Source
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppSource: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAppSource.');
            }
            const localVarPath = `/v2/app-source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires DASHBOARD_ADMIN or APP_SOURCE_ADMIN rights.
         * @summary Returns the details for an App Source
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourceDetails: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAppSourceDetails.');
            }
            const localVarPath = `/v2/app-source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires DASHBOARD_ADMIN rights
         * @summary Gets all App Sources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourcesWrapped: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-source`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of the available app clients (their names and UUIDs)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAppClientsWrapped: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-source/app-clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a copy of the openapispec file for the app source
         * @param {string} appId App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecFile: async (appId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getSpecFile.');
            }
            const localVarPath = `/v2/app-source/spec/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a copy of the openapispec file for the app source related to the endpoint
         * @param {string} endpointPrivId App Endpoint Privilege UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecFileByEndpointPriv: async (endpointPrivId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpointPrivId' is not null or undefined
            if (endpointPrivId === null || endpointPrivId === undefined) {
                throw new RequiredError('endpointPrivId','Required parameter endpointPrivId was null or undefined when calling getSpecFileByEndpointPriv.');
            }
            const localVarPath = `/v2/app-source/spec/endpoint-priv/{endpointPrivId}`
                .replace(`{${"endpointPrivId"}}`, encodeURIComponent(String(endpointPrivId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Deletes ALL app client privileges from provided App Source.  No App Clients will be able to use this app source\'s endpoints.
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAppClientPrivs: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeAllAppClientPrivs.');
            }
            const localVarPath = `/v2/app-source/app-clients/all/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
         * @summary Deletes a single app source admin by email address from provided App Source
         * @param {string} id App Source UUID
         * @param {DashboardUserDto} dashboardUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAppSourceAdmin: async (id: string, dashboardUserDto: DashboardUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeAppSourceAdmin.');
            }
            // verify required parameter 'dashboardUserDto' is not null or undefined
            if (dashboardUserDto === null || dashboardUserDto === undefined) {
                throw new RequiredError('dashboardUserDto','Required parameter dashboardUserDto was null or undefined when calling removeAppSourceAdmin.');
            }
            const localVarPath = `/v2/app-source/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof dashboardUserDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(dashboardUserDto !== undefined ? dashboardUserDto : {})
                : (dashboardUserDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Deletes an app source\'s endpoint to app client privilege relationship
         * @param {string} appId App Source UUID
         * @param {string} privId App Source Endpoint Privilege UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientToEndPointPriv: async (appId: string, privId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling removeClientToEndPointPriv.');
            }
            // verify required parameter 'privId' is not null or undefined
            if (privId === null || privId === undefined) {
                throw new RequiredError('privId','Required parameter privId was null or undefined when calling removeClientToEndPointPriv.');
            }
            const localVarPath = `/v2/app-source/app-clients/{appId}/{privId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"privId"}}`, encodeURIComponent(String(privId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN  of given App Id. Admin users can also be managed via this request method.  Emails for app source admins to a given App Source UUID will be implicitly added as new  DashboardUsers with the APP_SOURCE_ADMIN privilege.  Conversely a PUT that takes away an email that was there before  will be deleted as a DashboardUser if that email address does not have any other privileges in the system or its an  app source admin to some other app source application.
         * @summary Updates the details for an App Source
         * @param {string} id App Source id to update
         * @param {AppSourceDetailsDto} appSourceDetailsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppSourceDetails: async (id: string, appSourceDetailsDto: AppSourceDetailsDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAppSourceDetails.');
            }
            // verify required parameter 'appSourceDetailsDto' is not null or undefined
            if (appSourceDetailsDto === null || appSourceDetailsDto === undefined) {
                throw new RequiredError('appSourceDetailsDto','Required parameter appSourceDetailsDto was null or undefined when calling updateAppSourceDetails.');
            }
            const localVarPath = `/v2/app-source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof appSourceDetailsDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(appSourceDetailsDto !== undefined ? appSourceDetailsDto : {})
                : (appSourceDetailsDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppSourceControllerApi - functional programming interface
 * @export
 */
export const AppSourceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
         * @summary Adds single app source admin by email address to provided App Source
         * @param {string} id App Source UUID
         * @param {DashboardUserDto} dashboardUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).addAppSourceAdmin(id, dashboardUserDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Adds an app source\'s endpoint to app client privilege relationship
         * @param {AppEndPointPrivDto} appEndPointPrivDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClientToEndpointPriv(appEndPointPrivDto: AppEndPointPrivDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).addClientToEndpointPriv(appEndPointPrivDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires DASHBOARD_ADMIN rights
         * @summary Creates an App Source including App Client permissions.
         * @param {AppSourceDetailsDto} appSourceDetailsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppSource(appSourceDetailsDto: AppSourceDetailsDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).createAppSource(appSourceDetailsDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes the App Source
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppSource(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).deleteAppSource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires DASHBOARD_ADMIN or APP_SOURCE_ADMIN rights.
         * @summary Returns the details for an App Source
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppSourceDetails(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).getAppSourceDetails(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires DASHBOARD_ADMIN rights
         * @summary Gets all App Sources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppSourcesWrapped(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDtoResponseWrapper>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).getAppSourcesWrapped(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets a list of the available app clients (their names and UUIDs)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableAppClientsWrapped(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppClientSummaryDtoResponseWrapper>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).getAvailableAppClientsWrapped(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets a copy of the openapispec file for the app source
         * @param {string} appId App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecFile(appId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).getSpecFile(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets a copy of the openapispec file for the app source related to the endpoint
         * @param {string} endpointPrivId App Endpoint Privilege UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecFileByEndpointPriv(endpointPrivId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).getSpecFileByEndpointPriv(endpointPrivId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Deletes ALL app client privileges from provided App Source.  No App Clients will be able to use this app source\'s endpoints.
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAllAppClientPrivs(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).removeAllAppClientPrivs(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
         * @summary Deletes a single app source admin by email address from provided App Source
         * @param {string} id App Source UUID
         * @param {DashboardUserDto} dashboardUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).removeAppSourceAdmin(id, dashboardUserDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Deletes an app source\'s endpoint to app client privilege relationship
         * @param {string} appId App Source UUID
         * @param {string} privId App Source Endpoint Privilege UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClientToEndPointPriv(appId: string, privId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).removeClientToEndPointPriv(appId, privId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN  of given App Id. Admin users can also be managed via this request method.  Emails for app source admins to a given App Source UUID will be implicitly added as new  DashboardUsers with the APP_SOURCE_ADMIN privilege.  Conversely a PUT that takes away an email that was there before  will be deleted as a DashboardUser if that email address does not have any other privileges in the system or its an  app source admin to some other app source application.
         * @summary Updates the details for an App Source
         * @param {string} id App Source id to update
         * @param {AppSourceDetailsDto} appSourceDetailsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppSourceDetails(id: string, appSourceDetailsDto: AppSourceDetailsDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSourceDetailsDto>> {
            const localVarAxiosArgs = await AppSourceControllerApiAxiosParamCreator(configuration).updateAppSourceDetails(id, appSourceDetailsDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AppSourceControllerApi - factory interface
 * @export
 */
export const AppSourceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
         * @summary Adds single app source admin by email address to provided App Source
         * @param {string} id App Source UUID
         * @param {DashboardUserDto} dashboardUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).addAppSourceAdmin(id, dashboardUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Adds an app source\'s endpoint to app client privilege relationship
         * @param {AppEndPointPrivDto} appEndPointPrivDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientToEndpointPriv(appEndPointPrivDto: AppEndPointPrivDto, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).addClientToEndpointPriv(appEndPointPrivDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires DASHBOARD_ADMIN rights
         * @summary Creates an App Source including App Client permissions.
         * @param {AppSourceDetailsDto} appSourceDetailsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppSource(appSourceDetailsDto: AppSourceDetailsDto, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).createAppSource(appSourceDetailsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes the App Source
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppSource(id: string, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).deleteAppSource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires DASHBOARD_ADMIN or APP_SOURCE_ADMIN rights.
         * @summary Returns the details for an App Source
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourceDetails(id: string, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).getAppSourceDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires DASHBOARD_ADMIN rights
         * @summary Gets all App Sources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSourcesWrapped(options?: any): AxiosPromise<AppSourceDtoResponseWrapper> {
            return AppSourceControllerApiFp(configuration).getAppSourcesWrapped(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of the available app clients (their names and UUIDs)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAppClientsWrapped(options?: any): AxiosPromise<AppClientSummaryDtoResponseWrapper> {
            return AppSourceControllerApiFp(configuration).getAvailableAppClientsWrapped(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a copy of the openapispec file for the app source
         * @param {string} appId App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecFile(appId: string, options?: any): AxiosPromise<any> {
            return AppSourceControllerApiFp(configuration).getSpecFile(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a copy of the openapispec file for the app source related to the endpoint
         * @param {string} endpointPrivId App Endpoint Privilege UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecFileByEndpointPriv(endpointPrivId: string, options?: any): AxiosPromise<any> {
            return AppSourceControllerApiFp(configuration).getSpecFileByEndpointPriv(endpointPrivId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Deletes ALL app client privileges from provided App Source.  No App Clients will be able to use this app source\'s endpoints.
         * @param {string} id App Source UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAppClientPrivs(id: string, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).removeAllAppClientPrivs(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
         * @summary Deletes a single app source admin by email address from provided App Source
         * @param {string} id App Source UUID
         * @param {DashboardUserDto} dashboardUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).removeAppSourceAdmin(id, dashboardUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
         * @summary Deletes an app source\'s endpoint to app client privilege relationship
         * @param {string} appId App Source UUID
         * @param {string} privId App Source Endpoint Privilege UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientToEndPointPriv(appId: string, privId: string, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).removeClientToEndPointPriv(appId, privId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN  of given App Id. Admin users can also be managed via this request method.  Emails for app source admins to a given App Source UUID will be implicitly added as new  DashboardUsers with the APP_SOURCE_ADMIN privilege.  Conversely a PUT that takes away an email that was there before  will be deleted as a DashboardUser if that email address does not have any other privileges in the system or its an  app source admin to some other app source application.
         * @summary Updates the details for an App Source
         * @param {string} id App Source id to update
         * @param {AppSourceDetailsDto} appSourceDetailsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppSourceDetails(id: string, appSourceDetailsDto: AppSourceDetailsDto, options?: any): AxiosPromise<AppSourceDetailsDto> {
            return AppSourceControllerApiFp(configuration).updateAppSourceDetails(id, appSourceDetailsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppSourceControllerApi - interface
 * @export
 * @interface AppSourceControllerApi
 */
export interface AppSourceControllerApiInterface {
    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
     * @summary Adds single app source admin by email address to provided App Source
     * @param {string} id App Source UUID
     * @param {DashboardUserDto} dashboardUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    addAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
     * @summary Adds an app source\'s endpoint to app client privilege relationship
     * @param {AppEndPointPrivDto} appEndPointPrivDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    addClientToEndpointPriv(appEndPointPrivDto: AppEndPointPrivDto, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requires DASHBOARD_ADMIN rights
     * @summary Creates an App Source including App Client permissions.
     * @param {AppSourceDetailsDto} appSourceDetailsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    createAppSource(appSourceDetailsDto: AppSourceDetailsDto, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Deletes the App Source
     * @param {string} id App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    deleteAppSource(id: string, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requires DASHBOARD_ADMIN or APP_SOURCE_ADMIN rights.
     * @summary Returns the details for an App Source
     * @param {string} id App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    getAppSourceDetails(id: string, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requires DASHBOARD_ADMIN rights
     * @summary Gets all App Sources.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    getAppSourcesWrapped(options?: any): AxiosPromise<AppSourceDtoResponseWrapper>;

    /**
     * 
     * @summary Gets a list of the available app clients (their names and UUIDs)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    getAvailableAppClientsWrapped(options?: any): AxiosPromise<AppClientSummaryDtoResponseWrapper>;

    /**
     * 
     * @summary Gets a copy of the openapispec file for the app source
     * @param {string} appId App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    getSpecFile(appId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets a copy of the openapispec file for the app source related to the endpoint
     * @param {string} endpointPrivId App Endpoint Privilege UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    getSpecFileByEndpointPriv(endpointPrivId: string, options?: any): AxiosPromise<any>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
     * @summary Deletes ALL app client privileges from provided App Source.  No App Clients will be able to use this app source\'s endpoints.
     * @param {string} id App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    removeAllAppClientPrivs(id: string, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
     * @summary Deletes a single app source admin by email address from provided App Source
     * @param {string} id App Source UUID
     * @param {DashboardUserDto} dashboardUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    removeAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
     * @summary Deletes an app source\'s endpoint to app client privilege relationship
     * @param {string} appId App Source UUID
     * @param {string} privId App Source Endpoint Privilege UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    removeClientToEndPointPriv(appId: string, privId: string, options?: any): AxiosPromise<AppSourceDetailsDto>;

    /**
     * Requires DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN  of given App Id. Admin users can also be managed via this request method.  Emails for app source admins to a given App Source UUID will be implicitly added as new  DashboardUsers with the APP_SOURCE_ADMIN privilege.  Conversely a PUT that takes away an email that was there before  will be deleted as a DashboardUser if that email address does not have any other privileges in the system or its an  app source admin to some other app source application.
     * @summary Updates the details for an App Source
     * @param {string} id App Source id to update
     * @param {AppSourceDetailsDto} appSourceDetailsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApiInterface
     */
    updateAppSourceDetails(id: string, appSourceDetailsDto: AppSourceDetailsDto, options?: any): AxiosPromise<AppSourceDetailsDto>;

}

/**
 * AppSourceControllerApi - object-oriented interface
 * @export
 * @class AppSourceControllerApi
 * @extends {BaseAPI}
 */
export class AppSourceControllerApi extends BaseAPI implements AppSourceControllerApiInterface {
    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
     * @summary Adds single app source admin by email address to provided App Source
     * @param {string} id App Source UUID
     * @param {DashboardUserDto} dashboardUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public addAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any) {
        return AppSourceControllerApiFp(this.configuration).addAppSourceAdmin(id, dashboardUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
     * @summary Adds an app source\'s endpoint to app client privilege relationship
     * @param {AppEndPointPrivDto} appEndPointPrivDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public addClientToEndpointPriv(appEndPointPrivDto: AppEndPointPrivDto, options?: any) {
        return AppSourceControllerApiFp(this.configuration).addClientToEndpointPriv(appEndPointPrivDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires DASHBOARD_ADMIN rights
     * @summary Creates an App Source including App Client permissions.
     * @param {AppSourceDetailsDto} appSourceDetailsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public createAppSource(appSourceDetailsDto: AppSourceDetailsDto, options?: any) {
        return AppSourceControllerApiFp(this.configuration).createAppSource(appSourceDetailsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Deletes the App Source
     * @param {string} id App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public deleteAppSource(id: string, options?: any) {
        return AppSourceControllerApiFp(this.configuration).deleteAppSource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires DASHBOARD_ADMIN or APP_SOURCE_ADMIN rights.
     * @summary Returns the details for an App Source
     * @param {string} id App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public getAppSourceDetails(id: string, options?: any) {
        return AppSourceControllerApiFp(this.configuration).getAppSourceDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires DASHBOARD_ADMIN rights
     * @summary Gets all App Sources.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public getAppSourcesWrapped(options?: any) {
        return AppSourceControllerApiFp(this.configuration).getAppSourcesWrapped(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of the available app clients (their names and UUIDs)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public getAvailableAppClientsWrapped(options?: any) {
        return AppSourceControllerApiFp(this.configuration).getAvailableAppClientsWrapped(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a copy of the openapispec file for the app source
     * @param {string} appId App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public getSpecFile(appId: string, options?: any) {
        return AppSourceControllerApiFp(this.configuration).getSpecFile(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a copy of the openapispec file for the app source related to the endpoint
     * @param {string} endpointPrivId App Endpoint Privilege UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public getSpecFileByEndpointPriv(endpointPrivId: string, options?: any) {
        return AppSourceControllerApiFp(this.configuration).getSpecFileByEndpointPriv(endpointPrivId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
     * @summary Deletes ALL app client privileges from provided App Source.  No App Clients will be able to use this app source\'s endpoints.
     * @param {string} id App Source UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public removeAllAppClientPrivs(id: string, options?: any) {
        return AppSourceControllerApiFp(this.configuration).removeAllAppClientPrivs(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.
     * @summary Deletes a single app source admin by email address from provided App Source
     * @param {string} id App Source UUID
     * @param {DashboardUserDto} dashboardUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public removeAppSourceAdmin(id: string, dashboardUserDto: DashboardUserDto, options?: any) {
        return AppSourceControllerApiFp(this.configuration).removeAppSourceAdmin(id, dashboardUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.
     * @summary Deletes an app source\'s endpoint to app client privilege relationship
     * @param {string} appId App Source UUID
     * @param {string} privId App Source Endpoint Privilege UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public removeClientToEndPointPriv(appId: string, privId: string, options?: any) {
        return AppSourceControllerApiFp(this.configuration).removeClientToEndPointPriv(appId, privId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN  of given App Id. Admin users can also be managed via this request method.  Emails for app source admins to a given App Source UUID will be implicitly added as new  DashboardUsers with the APP_SOURCE_ADMIN privilege.  Conversely a PUT that takes away an email that was there before  will be deleted as a DashboardUser if that email address does not have any other privileges in the system or its an  app source admin to some other app source application.
     * @summary Updates the details for an App Source
     * @param {string} id App Source id to update
     * @param {AppSourceDetailsDto} appSourceDetailsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSourceControllerApi
     */
    public updateAppSourceDetails(id: string, appSourceDetailsDto: AppSourceDetailsDto, options?: any) {
        return AppSourceControllerApiFp(this.configuration).updateAppSourceDetails(id, appSourceDetailsDto, options).then((request) => request(this.axios, this.basePath));
    }
}
