/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestException } from '../models';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { InvalidScratchSpacePermissions } from '../models';
// @ts-ignore
import { PrivilegeDto } from '../models';
// @ts-ignore
import { RecordNotFoundException } from '../models';
// @ts-ignore
import { ResourceAlreadyExistsException } from '../models';
// @ts-ignore
import { ScratchStorageAppRegistryDto } from '../models';
// @ts-ignore
import { ScratchStorageAppUserPrivDto } from '../models';
// @ts-ignore
import { ScratchStorageEntryDto } from '../models';
// @ts-ignore
import { ScratchStorageUserDto } from '../models';
// @ts-ignore
import { ScratchValuePatchJsonDto } from '../models';
/**
 * ScratchStorageControllerApi - axios parameter creator
 * @export
 */
export const ScratchStorageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Adds a new Scratch Space user by their P1 email address
         * @param {ScratchStorageUserDto} scratchStorageUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewScratchUser: async (scratchStorageUserDto: ScratchStorageUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scratchStorageUserDto' is not null or undefined
            if (scratchStorageUserDto === null || scratchStorageUserDto === undefined) {
                throw new RequiredError('scratchStorageUserDto','Required parameter scratchStorageUserDto was null or undefined when calling addNewScratchUser.');
            }
            const localVarPath = `/v1/scratch/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchStorageUserDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchStorageUserDto !== undefined ? scratchStorageUserDto : {})
                : (scratchStorageUserDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
         * @summary Adds a user privilege to this app\'s data
         * @param {string} id Application UUID
         * @param {ScratchStorageAppUserPrivDto} scratchStorageAppUserPrivDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPriv: async (id: string, scratchStorageAppUserPrivDto: ScratchStorageAppUserPrivDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addUserPriv.');
            }
            // verify required parameter 'scratchStorageAppUserPrivDto' is not null or undefined
            if (scratchStorageAppUserPrivDto === null || scratchStorageAppUserPrivDto === undefined) {
                throw new RequiredError('scratchStorageAppUserPrivDto','Required parameter scratchStorageAppUserPrivDto was null or undefined when calling addUserPriv.');
            }
            const localVarPath = `/v1/scratch/apps/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchStorageAppUserPrivDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchStorageAppUserPrivDto !== undefined ? scratchStorageAppUserPrivDto : {})
                : (scratchStorageAppUserPrivDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Deletes all key-value pairs for a given App Id
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllKeyValuePairsForAppId: async (appId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteAllKeyValuePairsForAppId.');
            }
            const localVarPath = `/v1/scratch/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes this application from the Common API registry (removes from scratch space use)
         * @param {string} id Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExistingAppEntry: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteExistingAppEntry.');
            }
            const localVarPath = `/v1/scratch/apps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Deletes a key-value pair for a given App Id
         * @param {string} appId Application UUID
         * @param {string} key Key name of the key-value pair to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyValuePair: async (appId: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteKeyValuePair.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling deleteKeyValuePair.');
            }
            const localVarPath = `/v1/scratch/{appId}/key/{key}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes a scratch user
         * @param {string} id Scratch User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScratchUser: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteScratchUser.');
            }
            const localVarPath = `/v1/scratch/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Edit existing scratch space app information (its name)
         * @param {string} id Application UUID
         * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editExistingAppEntry: async (id: string, scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editExistingAppEntry.');
            }
            // verify required parameter 'scratchStorageAppRegistryDto' is not null or undefined
            if (scratchStorageAppRegistryDto === null || scratchStorageAppRegistryDto === undefined) {
                throw new RequiredError('scratchStorageAppRegistryDto','Required parameter scratchStorageAppRegistryDto was null or undefined when calling editExistingAppEntry.');
            }
            const localVarPath = `/v1/scratch/apps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchStorageAppRegistryDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchStorageAppRegistryDto !== undefined ? scratchStorageAppRegistryDto : {})
                : (scratchStorageAppRegistryDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Edits an existing Scratch Space user information
         * @param {string} id Scratch User Id
         * @param {ScratchStorageUserDto} scratchStorageUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editScratchUser: async (id: string, scratchStorageUserDto: ScratchStorageUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editScratchUser.');
            }
            // verify required parameter 'scratchStorageUserDto' is not null or undefined
            if (scratchStorageUserDto === null || scratchStorageUserDto === undefined) {
                throw new RequiredError('scratchStorageUserDto','Required parameter scratchStorageUserDto was null or undefined when calling editScratchUser.');
            }
            const localVarPath = `/v1/scratch/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchStorageUserDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchStorageUserDto !== undefined ? scratchStorageUserDto : {})
                : (scratchStorageUserDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires request to be under DASHBOARD_ADMIN privileges
         * @summary Retrieves all key-value pairs for all scratch space consuming apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeyValuePairs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/scratch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves all key-value pairs for for a single app
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeyValuePairsForAppId: async (appId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getAllKeyValuePairsForAppId.');
            }
            const localVarPath = `/v1/scratch/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves all keys for for a single app
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeysForAppId: async (appId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getAllKeysForAppId.');
            }
            const localVarPath = `/v1/scratch/apps/{appId}/keys`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Gets the entire table of Scratch Space users (ID, email...)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/scratch/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves a single key-value pair for for a single app
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyValueByKeyName: async (appId: string, keyName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getKeyValueByKeyName.');
            }
            // verify required parameter 'keyName' is not null or undefined
            if (keyName === null || keyName === undefined) {
                throw new RequiredError('keyName','Required parameter keyName was null or undefined when calling getKeyValueByKeyName.');
            }
            const localVarPath = `/v1/scratch/{appId}/{keyName}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Treats the key\'s value as JSON and returns the JsonPath query invoked onto that JSON structure. Returns JSON string matching the specified JSON Path
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyValueByKeyNameAsJson: async (appId: string, keyName: string, body: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getKeyValueByKeyNameAsJson.');
            }
            // verify required parameter 'keyName' is not null or undefined
            if (keyName === null || keyName === undefined) {
                throw new RequiredError('keyName','Required parameter keyName was null or undefined when calling getKeyValueByKeyNameAsJson.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getKeyValueByKeyNameAsJson.');
            }
            const localVarPath = `/v1/scratch/{appId}/{keyName}/jsonize`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain;charset=UTF-8';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or have SCRATCH_ADMIN rights for given app ID.
         * @summary Gets a single Scratch Storage app\'s record that is registered with Common API
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchAppById: async (appId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getScratchAppById.');
            }
            const localVarPath = `/v1/scratch/apps/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all the SCRATCH space privileges so that privilege names can be mapped to their IDs
         * @summary Gets all SCRATCH space privileges available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchPrivs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/scratch/users/privs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Gets the entire table of Scratch Storage apps that are registered with Common API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchSpaceApps: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/scratch/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Each Scratch Storage App returned will only contain user privileges for the Authorized User. It will not contain the privileges of other users.
         * @summary Gets all Scratch Storage apps that the current Authorized User is a user of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchSpaceAppsByAuthorizedUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/scratch/apps/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Treats the key\'s value as JSON and attempts to update a portion of it from given JSON Patch spec with provided value.  Returns NO_CONTENT response on successful update.
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {ScratchValuePatchJsonDto} scratchValuePatchJsonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchKeyValuePairAsJson: async (appId: string, keyName: string, scratchValuePatchJsonDto: ScratchValuePatchJsonDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling patchKeyValuePairAsJson.');
            }
            // verify required parameter 'keyName' is not null or undefined
            if (keyName === null || keyName === undefined) {
                throw new RequiredError('keyName','Required parameter keyName was null or undefined when calling patchKeyValuePairAsJson.');
            }
            // verify required parameter 'scratchValuePatchJsonDto' is not null or undefined
            if (scratchValuePatchJsonDto === null || scratchValuePatchJsonDto === undefined) {
                throw new RequiredError('scratchValuePatchJsonDto','Required parameter scratchValuePatchJsonDto was null or undefined when calling patchKeyValuePairAsJson.');
            }
            const localVarPath = `/v1/scratch/{appId}/{keyName}/jsonize`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchValuePatchJsonDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchValuePatchJsonDto !== undefined ? scratchValuePatchJsonDto : {})
                : (scratchValuePatchJsonDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Adds a new Scratch Strorage consuming app name to the Common API scratch storage space
         * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewScratchSpaceApp: async (scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scratchStorageAppRegistryDto' is not null or undefined
            if (scratchStorageAppRegistryDto === null || scratchStorageAppRegistryDto === undefined) {
                throw new RequiredError('scratchStorageAppRegistryDto','Required parameter scratchStorageAppRegistryDto was null or undefined when calling postNewScratchSpaceApp.');
            }
            const localVarPath = `/v1/scratch/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchStorageAppRegistryDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchStorageAppRegistryDto !== undefined ? scratchStorageAppRegistryDto : {})
                : (scratchStorageAppRegistryDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Removes a user privilege from this app\'s data
         * @param {string} id Application UUID
         * @param {string} appPrivIdEntry UUID of the User-Priv set to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserPriv: async (id: string, appPrivIdEntry: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeUserPriv.');
            }
            // verify required parameter 'appPrivIdEntry' is not null or undefined
            if (appPrivIdEntry === null || appPrivIdEntry === undefined) {
                throw new RequiredError('appPrivIdEntry','Required parameter appPrivIdEntry was null or undefined when calling removeUserPriv.');
            }
            const localVarPath = `/v1/scratch/apps/{id}/user/{appPrivIdEntry}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"appPrivIdEntry"}}`, encodeURIComponent(String(appPrivIdEntry)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
         * @summary Sets or un-sets the app\'s implicit read field
         * @param {string} id Application UUID
         * @param {boolean} priv Application User-Priv Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImplicitReadSetting: async (id: string, priv: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setImplicitReadSetting.');
            }
            // verify required parameter 'priv' is not null or undefined
            if (priv === null || priv === undefined) {
                throw new RequiredError('priv','Required parameter priv was null or undefined when calling setImplicitReadSetting.');
            }
            const localVarPath = `/v1/scratch/apps/{id}/implicitRead`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (priv !== undefined) {
                localVarQueryParameter['priv'] = priv;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Adds or updates a key-value pair for a given App Id
         * @param {ScratchStorageEntryDto} scratchStorageEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setKeyValuePair: async (scratchStorageEntryDto: ScratchStorageEntryDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scratchStorageEntryDto' is not null or undefined
            if (scratchStorageEntryDto === null || scratchStorageEntryDto === undefined) {
                throw new RequiredError('scratchStorageEntryDto','Required parameter scratchStorageEntryDto was null or undefined when calling setKeyValuePair.');
            }
            const localVarPath = `/v1/scratch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof scratchStorageEntryDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(scratchStorageEntryDto !== undefined ? scratchStorageEntryDto : {})
                : (scratchStorageEntryDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScratchStorageControllerApi - functional programming interface
 * @export
 */
export const ScratchStorageControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Adds a new Scratch Space user by their P1 email address
         * @param {ScratchStorageUserDto} scratchStorageUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewScratchUser(scratchStorageUserDto: ScratchStorageUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageUserDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).addNewScratchUser(scratchStorageUserDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
         * @summary Adds a user privilege to this app\'s data
         * @param {string} id Application UUID
         * @param {ScratchStorageAppUserPrivDto} scratchStorageAppUserPrivDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserPriv(id: string, scratchStorageAppUserPrivDto: ScratchStorageAppUserPrivDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).addUserPriv(id, scratchStorageAppUserPrivDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Deletes all key-value pairs for a given App Id
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllKeyValuePairsForAppId(appId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageEntryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).deleteAllKeyValuePairsForAppId(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes this application from the Common API registry (removes from scratch space use)
         * @param {string} id Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExistingAppEntry(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).deleteExistingAppEntry(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Deletes a key-value pair for a given App Id
         * @param {string} appId Application UUID
         * @param {string} key Key name of the key-value pair to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKeyValuePair(appId: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageEntryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).deleteKeyValuePair(appId, key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes a scratch user
         * @param {string} id Scratch User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScratchUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageUserDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).deleteScratchUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Edit existing scratch space app information (its name)
         * @param {string} id Application UUID
         * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editExistingAppEntry(id: string, scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).editExistingAppEntry(id, scratchStorageAppRegistryDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Edits an existing Scratch Space user information
         * @param {string} id Scratch User Id
         * @param {ScratchStorageUserDto} scratchStorageUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editScratchUser(id: string, scratchStorageUserDto: ScratchStorageUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageUserDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).editScratchUser(id, scratchStorageUserDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires request to be under DASHBOARD_ADMIN privileges
         * @summary Retrieves all key-value pairs for all scratch space consuming apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllKeyValuePairs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScratchStorageEntryDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getAllKeyValuePairs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves all key-value pairs for for a single app
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllKeyValuePairsForAppId(appId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScratchStorageEntryDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getAllKeyValuePairsForAppId(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves all keys for for a single app
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllKeysForAppId(appId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScratchStorageEntryDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getAllKeysForAppId(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Gets the entire table of Scratch Space users (ID, email...)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScratchStorageUserDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getAllUsers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves a single key-value pair for for a single app
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyValueByKeyName(appId: string, keyName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageEntryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getKeyValueByKeyName(appId, keyName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Treats the key\'s value as JSON and returns the JsonPath query invoked onto that JSON structure. Returns JSON string matching the specified JSON Path
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyValueByKeyNameAsJson(appId: string, keyName: string, body: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getKeyValueByKeyNameAsJson(appId, keyName, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or have SCRATCH_ADMIN rights for given app ID.
         * @summary Gets a single Scratch Storage app\'s record that is registered with Common API
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScratchAppById(appId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getScratchAppById(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets all the SCRATCH space privileges so that privilege names can be mapped to their IDs
         * @summary Gets all SCRATCH space privileges available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScratchPrivs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrivilegeDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getScratchPrivs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Gets the entire table of Scratch Storage apps that are registered with Common API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScratchSpaceApps(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScratchStorageAppRegistryDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getScratchSpaceApps(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Each Scratch Storage App returned will only contain user privileges for the Authorized User. It will not contain the privileges of other users.
         * @summary Gets all Scratch Storage apps that the current Authorized User is a user of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScratchSpaceAppsByAuthorizedUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScratchStorageAppRegistryDto>>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).getScratchSpaceAppsByAuthorizedUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Treats the key\'s value as JSON and attempts to update a portion of it from given JSON Patch spec with provided value.  Returns NO_CONTENT response on successful update.
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {ScratchValuePatchJsonDto} scratchValuePatchJsonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchKeyValuePairAsJson(appId: string, keyName: string, scratchValuePatchJsonDto: ScratchValuePatchJsonDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).patchKeyValuePairAsJson(appId, keyName, scratchValuePatchJsonDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Adds a new Scratch Strorage consuming app name to the Common API scratch storage space
         * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNewScratchSpaceApp(scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).postNewScratchSpaceApp(scratchStorageAppRegistryDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Removes a user privilege from this app\'s data
         * @param {string} id Application UUID
         * @param {string} appPrivIdEntry UUID of the User-Priv set to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserPriv(id: string, appPrivIdEntry: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).removeUserPriv(id, appPrivIdEntry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
         * @summary Sets or un-sets the app\'s implicit read field
         * @param {string} id Application UUID
         * @param {boolean} priv Application User-Priv Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setImplicitReadSetting(id: string, priv: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageAppRegistryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).setImplicitReadSetting(id, priv, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Adds or updates a key-value pair for a given App Id
         * @param {ScratchStorageEntryDto} scratchStorageEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setKeyValuePair(scratchStorageEntryDto: ScratchStorageEntryDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScratchStorageEntryDto>> {
            const localVarAxiosArgs = await ScratchStorageControllerApiAxiosParamCreator(configuration).setKeyValuePair(scratchStorageEntryDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScratchStorageControllerApi - factory interface
 * @export
 */
export const ScratchStorageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Adds a new Scratch Space user by their P1 email address
         * @param {ScratchStorageUserDto} scratchStorageUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewScratchUser(scratchStorageUserDto: ScratchStorageUserDto, options?: any): AxiosPromise<ScratchStorageUserDto> {
            return ScratchStorageControllerApiFp(configuration).addNewScratchUser(scratchStorageUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
         * @summary Adds a user privilege to this app\'s data
         * @param {string} id Application UUID
         * @param {ScratchStorageAppUserPrivDto} scratchStorageAppUserPrivDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPriv(id: string, scratchStorageAppUserPrivDto: ScratchStorageAppUserPrivDto, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).addUserPriv(id, scratchStorageAppUserPrivDto, options).then((request) => request(axios, basePath));
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Deletes all key-value pairs for a given App Id
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllKeyValuePairsForAppId(appId: string, options?: any): AxiosPromise<ScratchStorageEntryDto> {
            return ScratchStorageControllerApiFp(configuration).deleteAllKeyValuePairsForAppId(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes this application from the Common API registry (removes from scratch space use)
         * @param {string} id Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExistingAppEntry(id: string, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).deleteExistingAppEntry(id, options).then((request) => request(axios, basePath));
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Deletes a key-value pair for a given App Id
         * @param {string} appId Application UUID
         * @param {string} key Key name of the key-value pair to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyValuePair(appId: string, key: string, options?: any): AxiosPromise<ScratchStorageEntryDto> {
            return ScratchStorageControllerApiFp(configuration).deleteKeyValuePair(appId, key, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Deletes a scratch user
         * @param {string} id Scratch User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScratchUser(id: string, options?: any): AxiosPromise<ScratchStorageUserDto> {
            return ScratchStorageControllerApiFp(configuration).deleteScratchUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Edit existing scratch space app information (its name)
         * @param {string} id Application UUID
         * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editExistingAppEntry(id: string, scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).editExistingAppEntry(id, scratchStorageAppRegistryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Edits an existing Scratch Space user information
         * @param {string} id Scratch User Id
         * @param {ScratchStorageUserDto} scratchStorageUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editScratchUser(id: string, scratchStorageUserDto: ScratchStorageUserDto, options?: any): AxiosPromise<ScratchStorageUserDto> {
            return ScratchStorageControllerApiFp(configuration).editScratchUser(id, scratchStorageUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires request to be under DASHBOARD_ADMIN privileges
         * @summary Retrieves all key-value pairs for all scratch space consuming apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeyValuePairs(options?: any): AxiosPromise<Array<ScratchStorageEntryDto>> {
            return ScratchStorageControllerApiFp(configuration).getAllKeyValuePairs(options).then((request) => request(axios, basePath));
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves all key-value pairs for for a single app
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeyValuePairsForAppId(appId: string, options?: any): AxiosPromise<Array<ScratchStorageEntryDto>> {
            return ScratchStorageControllerApiFp(configuration).getAllKeyValuePairsForAppId(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves all keys for for a single app
         * @param {string} appId Application UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeysForAppId(appId: string, options?: any): AxiosPromise<Array<ScratchStorageEntryDto>> {
            return ScratchStorageControllerApiFp(configuration).getAllKeysForAppId(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Gets the entire table of Scratch Space users (ID, email...)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: any): AxiosPromise<Array<ScratchStorageUserDto>> {
            return ScratchStorageControllerApiFp(configuration).getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Retrieves a single key-value pair for for a single app
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyValueByKeyName(appId: string, keyName: string, options?: any): AxiosPromise<ScratchStorageEntryDto> {
            return ScratchStorageControllerApiFp(configuration).getKeyValueByKeyName(appId, keyName, options).then((request) => request(axios, basePath));
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Treats the key\'s value as JSON and returns the JsonPath query invoked onto that JSON structure. Returns JSON string matching the specified JSON Path
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyValueByKeyNameAsJson(appId: string, keyName: string, body: string, options?: any): AxiosPromise<string> {
            return ScratchStorageControllerApiFp(configuration).getKeyValueByKeyNameAsJson(appId, keyName, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights or have SCRATCH_ADMIN rights for given app ID.
         * @summary Gets a single Scratch Storage app\'s record that is registered with Common API
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchAppById(appId: string, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).getScratchAppById(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all the SCRATCH space privileges so that privilege names can be mapped to their IDs
         * @summary Gets all SCRATCH space privileges available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchPrivs(options?: any): AxiosPromise<Array<PrivilegeDto>> {
            return ScratchStorageControllerApiFp(configuration).getScratchPrivs(options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Gets the entire table of Scratch Storage apps that are registered with Common API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchSpaceApps(options?: any): AxiosPromise<Array<ScratchStorageAppRegistryDto>> {
            return ScratchStorageControllerApiFp(configuration).getScratchSpaceApps(options).then((request) => request(axios, basePath));
        },
        /**
         * Each Scratch Storage App returned will only contain user privileges for the Authorized User. It will not contain the privileges of other users.
         * @summary Gets all Scratch Storage apps that the current Authorized User is a user of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScratchSpaceAppsByAuthorizedUser(options?: any): AxiosPromise<Array<ScratchStorageAppRegistryDto>> {
            return ScratchStorageControllerApiFp(configuration).getScratchSpaceAppsByAuthorizedUser(options).then((request) => request(axios, basePath));
        },
        /**
         * App ID is the UUID of the owning application
         * @summary Treats the key\'s value as JSON and attempts to update a portion of it from given JSON Patch spec with provided value.  Returns NO_CONTENT response on successful update.
         * @param {string} appId Application UUID
         * @param {string} keyName Key Name to look up
         * @param {ScratchValuePatchJsonDto} scratchValuePatchJsonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchKeyValuePairAsJson(appId: string, keyName: string, scratchValuePatchJsonDto: ScratchValuePatchJsonDto, options?: any): AxiosPromise<object> {
            return ScratchStorageControllerApiFp(configuration).patchKeyValuePairAsJson(appId, keyName, scratchValuePatchJsonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Adds a new Scratch Strorage consuming app name to the Common API scratch storage space
         * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewScratchSpaceApp(scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).postNewScratchSpaceApp(scratchStorageAppRegistryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights
         * @summary Removes a user privilege from this app\'s data
         * @param {string} id Application UUID
         * @param {string} appPrivIdEntry UUID of the User-Priv set to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserPriv(id: string, appPrivIdEntry: string, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).removeUserPriv(id, appPrivIdEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
         * @summary Sets or un-sets the app\'s implicit read field
         * @param {string} id Application UUID
         * @param {boolean} priv Application User-Priv Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImplicitReadSetting(id: string, priv: boolean, options?: any): AxiosPromise<ScratchStorageAppRegistryDto> {
            return ScratchStorageControllerApiFp(configuration).setImplicitReadSetting(id, priv, options).then((request) => request(axios, basePath));
        },
        /**
         * SCRATCH_WRITE privileges are required for the requester for the given App Id
         * @summary Adds or updates a key-value pair for a given App Id
         * @param {ScratchStorageEntryDto} scratchStorageEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setKeyValuePair(scratchStorageEntryDto: ScratchStorageEntryDto, options?: any): AxiosPromise<ScratchStorageEntryDto> {
            return ScratchStorageControllerApiFp(configuration).setKeyValuePair(scratchStorageEntryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScratchStorageControllerApi - interface
 * @export
 * @interface ScratchStorageControllerApi
 */
export interface ScratchStorageControllerApiInterface {
    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Adds a new Scratch Space user by their P1 email address
     * @param {ScratchStorageUserDto} scratchStorageUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    addNewScratchUser(scratchStorageUserDto: ScratchStorageUserDto, options?: any): AxiosPromise<ScratchStorageUserDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
     * @summary Adds a user privilege to this app\'s data
     * @param {string} id Application UUID
     * @param {ScratchStorageAppUserPrivDto} scratchStorageAppUserPrivDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    addUserPriv(id: string, scratchStorageAppUserPrivDto: ScratchStorageAppUserPrivDto, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * SCRATCH_WRITE privileges are required for the requester for the given App Id
     * @summary Deletes all key-value pairs for a given App Id
     * @param {string} appId Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    deleteAllKeyValuePairsForAppId(appId: string, options?: any): AxiosPromise<ScratchStorageEntryDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Deletes this application from the Common API registry (removes from scratch space use)
     * @param {string} id Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    deleteExistingAppEntry(id: string, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * SCRATCH_WRITE privileges are required for the requester for the given App Id
     * @summary Deletes a key-value pair for a given App Id
     * @param {string} appId Application UUID
     * @param {string} key Key name of the key-value pair to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    deleteKeyValuePair(appId: string, key: string, options?: any): AxiosPromise<ScratchStorageEntryDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Deletes a scratch user
     * @param {string} id Scratch User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    deleteScratchUser(id: string, options?: any): AxiosPromise<ScratchStorageUserDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Edit existing scratch space app information (its name)
     * @param {string} id Application UUID
     * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    editExistingAppEntry(id: string, scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Edits an existing Scratch Space user information
     * @param {string} id Scratch User Id
     * @param {ScratchStorageUserDto} scratchStorageUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    editScratchUser(id: string, scratchStorageUserDto: ScratchStorageUserDto, options?: any): AxiosPromise<ScratchStorageUserDto>;

    /**
     * Requires request to be under DASHBOARD_ADMIN privileges
     * @summary Retrieves all key-value pairs for all scratch space consuming apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getAllKeyValuePairs(options?: any): AxiosPromise<Array<ScratchStorageEntryDto>>;

    /**
     * App ID is the UUID of the owning application
     * @summary Retrieves all key-value pairs for for a single app
     * @param {string} appId Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getAllKeyValuePairsForAppId(appId: string, options?: any): AxiosPromise<Array<ScratchStorageEntryDto>>;

    /**
     * App ID is the UUID of the owning application
     * @summary Retrieves all keys for for a single app
     * @param {string} appId Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getAllKeysForAppId(appId: string, options?: any): AxiosPromise<Array<ScratchStorageEntryDto>>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Gets the entire table of Scratch Space users (ID, email...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getAllUsers(options?: any): AxiosPromise<Array<ScratchStorageUserDto>>;

    /**
     * App ID is the UUID of the owning application
     * @summary Retrieves a single key-value pair for for a single app
     * @param {string} appId Application UUID
     * @param {string} keyName Key Name to look up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getKeyValueByKeyName(appId: string, keyName: string, options?: any): AxiosPromise<ScratchStorageEntryDto>;

    /**
     * App ID is the UUID of the owning application
     * @summary Treats the key\'s value as JSON and returns the JsonPath query invoked onto that JSON structure. Returns JSON string matching the specified JSON Path
     * @param {string} appId Application UUID
     * @param {string} keyName Key Name to look up
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getKeyValueByKeyNameAsJson(appId: string, keyName: string, body: string, options?: any): AxiosPromise<string>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights or have SCRATCH_ADMIN rights for given app ID.
     * @summary Gets a single Scratch Storage app\'s record that is registered with Common API
     * @param {string} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getScratchAppById(appId: string, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * Gets all the SCRATCH space privileges so that privilege names can be mapped to their IDs
     * @summary Gets all SCRATCH space privileges available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getScratchPrivs(options?: any): AxiosPromise<Array<PrivilegeDto>>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Gets the entire table of Scratch Storage apps that are registered with Common API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getScratchSpaceApps(options?: any): AxiosPromise<Array<ScratchStorageAppRegistryDto>>;

    /**
     * Each Scratch Storage App returned will only contain user privileges for the Authorized User. It will not contain the privileges of other users.
     * @summary Gets all Scratch Storage apps that the current Authorized User is a user of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    getScratchSpaceAppsByAuthorizedUser(options?: any): AxiosPromise<Array<ScratchStorageAppRegistryDto>>;

    /**
     * App ID is the UUID of the owning application
     * @summary Treats the key\'s value as JSON and attempts to update a portion of it from given JSON Patch spec with provided value.  Returns NO_CONTENT response on successful update.
     * @param {string} appId Application UUID
     * @param {string} keyName Key Name to look up
     * @param {ScratchValuePatchJsonDto} scratchValuePatchJsonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    patchKeyValuePairAsJson(appId: string, keyName: string, scratchValuePatchJsonDto: ScratchValuePatchJsonDto, options?: any): AxiosPromise<object>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Adds a new Scratch Strorage consuming app name to the Common API scratch storage space
     * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    postNewScratchSpaceApp(scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Removes a user privilege from this app\'s data
     * @param {string} id Application UUID
     * @param {string} appPrivIdEntry UUID of the User-Priv set to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    removeUserPriv(id: string, appPrivIdEntry: string, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
     * @summary Sets or un-sets the app\'s implicit read field
     * @param {string} id Application UUID
     * @param {boolean} priv Application User-Priv Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    setImplicitReadSetting(id: string, priv: boolean, options?: any): AxiosPromise<ScratchStorageAppRegistryDto>;

    /**
     * SCRATCH_WRITE privileges are required for the requester for the given App Id
     * @summary Adds or updates a key-value pair for a given App Id
     * @param {ScratchStorageEntryDto} scratchStorageEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApiInterface
     */
    setKeyValuePair(scratchStorageEntryDto: ScratchStorageEntryDto, options?: any): AxiosPromise<ScratchStorageEntryDto>;

}

/**
 * ScratchStorageControllerApi - object-oriented interface
 * @export
 * @class ScratchStorageControllerApi
 * @extends {BaseAPI}
 */
export class ScratchStorageControllerApi extends BaseAPI implements ScratchStorageControllerApiInterface {
    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Adds a new Scratch Space user by their P1 email address
     * @param {ScratchStorageUserDto} scratchStorageUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public addNewScratchUser(scratchStorageUserDto: ScratchStorageUserDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).addNewScratchUser(scratchStorageUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
     * @summary Adds a user privilege to this app\'s data
     * @param {string} id Application UUID
     * @param {ScratchStorageAppUserPrivDto} scratchStorageAppUserPrivDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public addUserPriv(id: string, scratchStorageAppUserPrivDto: ScratchStorageAppUserPrivDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).addUserPriv(id, scratchStorageAppUserPrivDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SCRATCH_WRITE privileges are required for the requester for the given App Id
     * @summary Deletes all key-value pairs for a given App Id
     * @param {string} appId Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public deleteAllKeyValuePairsForAppId(appId: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).deleteAllKeyValuePairsForAppId(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Deletes this application from the Common API registry (removes from scratch space use)
     * @param {string} id Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public deleteExistingAppEntry(id: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).deleteExistingAppEntry(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SCRATCH_WRITE privileges are required for the requester for the given App Id
     * @summary Deletes a key-value pair for a given App Id
     * @param {string} appId Application UUID
     * @param {string} key Key name of the key-value pair to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public deleteKeyValuePair(appId: string, key: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).deleteKeyValuePair(appId, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Deletes a scratch user
     * @param {string} id Scratch User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public deleteScratchUser(id: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).deleteScratchUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Edit existing scratch space app information (its name)
     * @param {string} id Application UUID
     * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public editExistingAppEntry(id: string, scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).editExistingAppEntry(id, scratchStorageAppRegistryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Edits an existing Scratch Space user information
     * @param {string} id Scratch User Id
     * @param {ScratchStorageUserDto} scratchStorageUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public editScratchUser(id: string, scratchStorageUserDto: ScratchStorageUserDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).editScratchUser(id, scratchStorageUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires request to be under DASHBOARD_ADMIN privileges
     * @summary Retrieves all key-value pairs for all scratch space consuming apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getAllKeyValuePairs(options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getAllKeyValuePairs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * App ID is the UUID of the owning application
     * @summary Retrieves all key-value pairs for for a single app
     * @param {string} appId Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getAllKeyValuePairsForAppId(appId: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getAllKeyValuePairsForAppId(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * App ID is the UUID of the owning application
     * @summary Retrieves all keys for for a single app
     * @param {string} appId Application UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getAllKeysForAppId(appId: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getAllKeysForAppId(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Gets the entire table of Scratch Space users (ID, email...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getAllUsers(options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * App ID is the UUID of the owning application
     * @summary Retrieves a single key-value pair for for a single app
     * @param {string} appId Application UUID
     * @param {string} keyName Key Name to look up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getKeyValueByKeyName(appId: string, keyName: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getKeyValueByKeyName(appId, keyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * App ID is the UUID of the owning application
     * @summary Treats the key\'s value as JSON and returns the JsonPath query invoked onto that JSON structure. Returns JSON string matching the specified JSON Path
     * @param {string} appId Application UUID
     * @param {string} keyName Key Name to look up
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getKeyValueByKeyNameAsJson(appId: string, keyName: string, body: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getKeyValueByKeyNameAsJson(appId, keyName, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights or have SCRATCH_ADMIN rights for given app ID.
     * @summary Gets a single Scratch Storage app\'s record that is registered with Common API
     * @param {string} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getScratchAppById(appId: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getScratchAppById(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all the SCRATCH space privileges so that privilege names can be mapped to their IDs
     * @summary Gets all SCRATCH space privileges available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getScratchPrivs(options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getScratchPrivs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Gets the entire table of Scratch Storage apps that are registered with Common API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getScratchSpaceApps(options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getScratchSpaceApps(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Each Scratch Storage App returned will only contain user privileges for the Authorized User. It will not contain the privileges of other users.
     * @summary Gets all Scratch Storage apps that the current Authorized User is a user of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public getScratchSpaceAppsByAuthorizedUser(options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).getScratchSpaceAppsByAuthorizedUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * App ID is the UUID of the owning application
     * @summary Treats the key\'s value as JSON and attempts to update a portion of it from given JSON Patch spec with provided value.  Returns NO_CONTENT response on successful update.
     * @param {string} appId Application UUID
     * @param {string} keyName Key Name to look up
     * @param {ScratchValuePatchJsonDto} scratchValuePatchJsonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public patchKeyValuePairAsJson(appId: string, keyName: string, scratchValuePatchJsonDto: ScratchValuePatchJsonDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).patchKeyValuePairAsJson(appId, keyName, scratchValuePatchJsonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Adds a new Scratch Strorage consuming app name to the Common API scratch storage space
     * @param {ScratchStorageAppRegistryDto} scratchStorageAppRegistryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public postNewScratchSpaceApp(scratchStorageAppRegistryDto: ScratchStorageAppRegistryDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).postNewScratchSpaceApp(scratchStorageAppRegistryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights
     * @summary Removes a user privilege from this app\'s data
     * @param {string} id Application UUID
     * @param {string} appPrivIdEntry UUID of the User-Priv set to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public removeUserPriv(id: string, appPrivIdEntry: string, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).removeUserPriv(id, appPrivIdEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID
     * @summary Sets or un-sets the app\'s implicit read field
     * @param {string} id Application UUID
     * @param {boolean} priv Application User-Priv Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public setImplicitReadSetting(id: string, priv: boolean, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).setImplicitReadSetting(id, priv, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SCRATCH_WRITE privileges are required for the requester for the given App Id
     * @summary Adds or updates a key-value pair for a given App Id
     * @param {ScratchStorageEntryDto} scratchStorageEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScratchStorageControllerApi
     */
    public setKeyValuePair(scratchStorageEntryDto: ScratchStorageEntryDto, options?: any) {
        return ScratchStorageControllerApiFp(this.configuration).setKeyValuePair(scratchStorageEntryDto, options).then((request) => request(this.axios, this.basePath));
    }
}
