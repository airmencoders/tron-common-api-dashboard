/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { Flight } from '../models';
// @ts-ignore
import { Group } from '../models';
// @ts-ignore
import { OrganizationDto } from '../models';
// @ts-ignore
import { OtherUsaf } from '../models';
// @ts-ignore
import { Squadron } from '../models';
// @ts-ignore
import { Wing } from '../models';
/**
 * WingControllerApi - axios parameter creator
 * @export
 */
export const WingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds one or more WING entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more WING entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewWings: async (organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling addNewWings.');
            }
            const localVarPath = `/v1/wing/wings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds member(s) to a WING
         * @summary Add member(s) to a WING
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWingMembers: async (id: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addWingMembers.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling addWingMembers.');
            }
            const localVarPath = `/v1/wing/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new USAF WING organization
         * @summary Adds a new USAF WING organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewWing: async (organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling createNewWing.');
            }
            const localVarPath = `/v1/wing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing WING
         * @summary Deletes an existing WING
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWing: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteWing.');
            }
            const localVarPath = `/v1/wing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a member(s) from the WING
         * @summary Deletes a member(s) from the WING
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWingMembers: async (id: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteWingMembers.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling deleteWingMembers.');
            }
            const localVarPath = `/v1/wing/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF FLIGHT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWingTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a USAF WING organization by ID
         * @summary Retrieves a USAF WING organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWingById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getWingById.');
            }
            const localVarPath = `/v1/wing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing WING\'s attributes
         * @summary Updates an existing WING\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWing: async (id: string, requestBody: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchWing.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling patchWing.');
            }
            const localVarPath = `/v1/wing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing WING
         * @summary Updates an existing WING
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWing: async (id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateWing.');
            }
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling updateWing.');
            }
            const localVarPath = `/v1/wing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WingControllerApi - functional programming interface
 * @export
 */
export const WingControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds one or more WING entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more WING entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds member(s) to a WING
         * @summary Add member(s) to a WING
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWingMembers(id: string, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).addWingMembers(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new USAF WING organization
         * @summary Adds a new USAF WING organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing WING
         * @summary Deletes an existing WING
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWing(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).deleteWing(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a member(s) from the WING
         * @summary Deletes a member(s) from the WING
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWingMembers(id: string, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).deleteWingMembers(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF FLIGHT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWingTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).getAllWingTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a USAF WING organization by ID
         * @summary Retrieves a USAF WING organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWingById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).getWingById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing WING\'s attributes
         * @summary Updates an existing WING\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWing(id: string, requestBody: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).patchWing(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing WING
         * @summary Updates an existing WING
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWing(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await WingControllerApiAxiosParamCreator(configuration).updateWing(id, organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WingControllerApi - factory interface
 * @export
 */
export const WingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds one or more WING entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more WING entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): AxiosPromise<OrganizationDto> {
            return WingControllerApiFp(configuration).addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds member(s) to a WING
         * @summary Add member(s) to a WING
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWingMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return WingControllerApiFp(configuration).addWingMembers(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new USAF WING organization
         * @summary Adds a new USAF WING organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto> {
            return WingControllerApiFp(configuration).createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing WING
         * @summary Deletes an existing WING
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWing(id: string, options?: any): AxiosPromise<void> {
            return WingControllerApiFp(configuration).deleteWing(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a member(s) from the WING
         * @summary Deletes a member(s) from the WING
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWingMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return WingControllerApiFp(configuration).deleteWingMembers(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF FLIGHT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWingTypes(options?: any): AxiosPromise<OrganizationDto> {
            return WingControllerApiFp(configuration).getAllWingTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a USAF WING organization by ID
         * @summary Retrieves a USAF WING organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWingById(id: string, options?: any): AxiosPromise<OrganizationDto> {
            return WingControllerApiFp(configuration).getWingById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing WING\'s attributes
         * @summary Updates an existing WING\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWing(id: string, requestBody: { [key: string]: string; }, options?: any): AxiosPromise<OrganizationDto> {
            return WingControllerApiFp(configuration).patchWing(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing WING
         * @summary Updates an existing WING
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWing(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto> {
            return WingControllerApiFp(configuration).updateWing(id, organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WingControllerApi - interface
 * @export
 * @interface WingControllerApi
 */
export interface WingControllerApiInterface {
    /**
     * Adds one or more WING entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * @summary Adds one or more WING entities
     * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Adds member(s) to a WING
     * @summary Add member(s) to a WING
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    addWingMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void>;

    /**
     * Adds a new USAF WING organization
     * @summary Adds a new USAF WING organization
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Deletes an existing WING
     * @summary Deletes an existing WING
     * @param {string} id UUID of the host organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    deleteWing(id: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a member(s) from the WING
     * @summary Deletes a member(s) from the WING
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    deleteWingMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void>;

    /**
     * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
     * @summary Retrieves all organizations of type USAF FLIGHT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    getAllWingTypes(options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Retrieves a USAF WING organization by ID
     * @summary Retrieves a USAF WING organization by ID
     * @param {string} id UUID of the organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    getWingById(id: string, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Updates an existing WING\'s attributes
     * @summary Updates an existing WING\'s attributes
     * @param {string} id UUID of the host organization record
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    patchWing(id: string, requestBody: { [key: string]: string; }, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Updates an existing WING
     * @summary Updates an existing WING
     * @param {string} id UUID of the organization record
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApiInterface
     */
    updateWing(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto>;

}

/**
 * WingControllerApi - object-oriented interface
 * @export
 * @class WingControllerApi
 * @extends {BaseAPI}
 */
export class WingControllerApi extends BaseAPI implements WingControllerApiInterface {
    /**
     * Adds one or more WING entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * @summary Adds one or more WING entities
     * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any) {
        return WingControllerApiFp(this.configuration).addNewWings(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds member(s) to a WING
     * @summary Add member(s) to a WING
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public addWingMembers(id: string, requestBody: Array<string>, options?: any) {
        return WingControllerApiFp(this.configuration).addWingMembers(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new USAF WING organization
     * @summary Adds a new USAF WING organization
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any) {
        return WingControllerApiFp(this.configuration).createNewWing(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing WING
     * @summary Deletes an existing WING
     * @param {string} id UUID of the host organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public deleteWing(id: string, options?: any) {
        return WingControllerApiFp(this.configuration).deleteWing(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a member(s) from the WING
     * @summary Deletes a member(s) from the WING
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public deleteWingMembers(id: string, requestBody: Array<string>, options?: any) {
        return WingControllerApiFp(this.configuration).deleteWingMembers(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
     * @summary Retrieves all organizations of type USAF FLIGHT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public getAllWingTypes(options?: any) {
        return WingControllerApiFp(this.configuration).getAllWingTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a USAF WING organization by ID
     * @summary Retrieves a USAF WING organization by ID
     * @param {string} id UUID of the organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public getWingById(id: string, options?: any) {
        return WingControllerApiFp(this.configuration).getWingById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing WING\'s attributes
     * @summary Updates an existing WING\'s attributes
     * @param {string} id UUID of the host organization record
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public patchWing(id: string, requestBody: { [key: string]: string; }, options?: any) {
        return WingControllerApiFp(this.configuration).patchWing(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing WING
     * @summary Updates an existing WING
     * @param {string} id UUID of the organization record
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WingControllerApi
     */
    public updateWing(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any) {
        return WingControllerApiFp(this.configuration).updateWing(id, organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }
}
