/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * DocumentSpaceWebDavControllerApi - axios parameter creator
 * @export
 */
export const DocumentSpaceWebDavControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand1: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand1.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand2: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand2.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand3: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand3.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand4: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand4.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand5: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand5.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand6: async (spaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            if (spaceId === null || spaceId === undefined) {
                throw new RequiredError('spaceId','Required parameter spaceId was null or undefined when calling processWebDavCommand6.');
            }
            const localVarPath = `/v2/document-space-dav/{spaceId}/**`
                .replace(`{${"spaceId"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentSpaceWebDavControllerApi - functional programming interface
 * @export
 */
export const DocumentSpaceWebDavControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand1(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand1(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand2(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand2(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand3(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand3(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand4(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand4(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand5(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand5(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWebDavCommand6(spaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceWebDavControllerApiAxiosParamCreator(configuration).processWebDavCommand6(spaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentSpaceWebDavControllerApi - factory interface
 * @export
 */
export const DocumentSpaceWebDavControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand(spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand1(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand1(spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand2(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand2(spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand3(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand3(spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand4(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand4(spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand5(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand5(spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWebDavCommand6(spaceId: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceWebDavControllerApiFp(configuration).processWebDavCommand6(spaceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentSpaceWebDavControllerApi - interface
 * @export
 * @interface DocumentSpaceWebDavControllerApi
 */
export interface DocumentSpaceWebDavControllerApiInterface {
    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand(spaceId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand1(spaceId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand2(spaceId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand3(spaceId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand4(spaceId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand5(spaceId: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApiInterface
     */
    processWebDavCommand6(spaceId: string, options?: any): AxiosPromise<object>;

}

/**
 * DocumentSpaceWebDavControllerApi - object-oriented interface
 * @export
 * @class DocumentSpaceWebDavControllerApi
 * @extends {BaseAPI}
 */
export class DocumentSpaceWebDavControllerApi extends BaseAPI implements DocumentSpaceWebDavControllerApiInterface {
    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand(spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand1(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand1(spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand2(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand2(spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand3(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand3(spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand4(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand4(spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand5(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand5(spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceWebDavControllerApi
     */
    public processWebDavCommand6(spaceId: string, options?: any) {
        return DocumentSpaceWebDavControllerApiFp(this.configuration).processWebDavCommand6(spaceId, options).then((request) => request(this.axios, this.basePath));
    }
}
