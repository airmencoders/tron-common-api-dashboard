/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EventRequestLogDtoPaginationResponseWrapper } from '../models';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { FilterDto } from '../models';
/**
 * EventRequestLogControllerApi - axios parameter creator
 * @export
 */
export const EventRequestLogControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves webhook requests sent to all pubsub event subscribers
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventRequestLogs: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/event-request-log/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves webhook requests sent to all pubsub event subscribers with filtering
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventRequestLogsWithFilter: async (filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'filterDto' is not null or undefined
            if (filterDto === null || filterDto === undefined) {
                throw new RequiredError('filterDto','Required parameter filterDto was null or undefined when calling getAllEventRequestLogsWithFilter.');
            }
            const localVarPath = `/v2/event-request-log/all/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof filterDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(filterDto !== undefined ? filterDto : {})
                : (filterDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to the requesting App Client
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClient: async (page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/event-request-log/app-client/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber
         * @param {string} appId App Client ID
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClientId: async (appId: string, page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getEventRequestLogsByAppClientId.');
            }
            const localVarPath = `/v2/event-request-log/app-client/id/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber with filtering
         * @param {string} appId App Client ID
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClientIdWithFilter: async (appId: string, filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getEventRequestLogsByAppClientIdWithFilter.');
            }
            // verify required parameter 'filterDto' is not null or undefined
            if (filterDto === null || filterDto === undefined) {
                throw new RequiredError('filterDto','Required parameter filterDto was null or undefined when calling getEventRequestLogsByAppClientIdWithFilter.');
            }
            const localVarPath = `/v2/event-request-log/app-client/id/{appId}/filter`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof filterDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(filterDto !== undefined ? filterDto : {})
                : (filterDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to the requesting App Client with filtering
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClientWithFilter: async (filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'filterDto' is not null or undefined
            if (filterDto === null || filterDto === undefined) {
                throw new RequiredError('filterDto','Required parameter filterDto was null or undefined when calling getEventRequestLogsByAppClientWithFilter.');
            }
            const localVarPath = `/v2/event-request-log/app-client/self/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof filterDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(filterDto !== undefined ? filterDto : {})
                : (filterDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventRequestLogControllerApi - functional programming interface
 * @export
 */
export const EventRequestLogControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves webhook requests sent to all pubsub event subscribers
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEventRequestLogs(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>> {
            const localVarAxiosArgs = await EventRequestLogControllerApiAxiosParamCreator(configuration).getAllEventRequestLogs(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves webhook requests sent to all pubsub event subscribers with filtering
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEventRequestLogsWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>> {
            const localVarAxiosArgs = await EventRequestLogControllerApiAxiosParamCreator(configuration).getAllEventRequestLogsWithFilter(filterDto, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to the requesting App Client
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventRequestLogsByAppClient(page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>> {
            const localVarAxiosArgs = await EventRequestLogControllerApiAxiosParamCreator(configuration).getEventRequestLogsByAppClient(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber
         * @param {string} appId App Client ID
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventRequestLogsByAppClientId(appId: string, page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>> {
            const localVarAxiosArgs = await EventRequestLogControllerApiAxiosParamCreator(configuration).getEventRequestLogsByAppClientId(appId, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber with filtering
         * @param {string} appId App Client ID
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventRequestLogsByAppClientIdWithFilter(appId: string, filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>> {
            const localVarAxiosArgs = await EventRequestLogControllerApiAxiosParamCreator(configuration).getEventRequestLogsByAppClientIdWithFilter(appId, filterDto, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to the requesting App Client with filtering
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventRequestLogsByAppClientWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>> {
            const localVarAxiosArgs = await EventRequestLogControllerApiAxiosParamCreator(configuration).getEventRequestLogsByAppClientWithFilter(filterDto, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventRequestLogControllerApi - factory interface
 * @export
 */
export const EventRequestLogControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves webhook requests sent to all pubsub event subscribers
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventRequestLogs(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper> {
            return EventRequestLogControllerApiFp(configuration).getAllEventRequestLogs(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves webhook requests sent to all pubsub event subscribers with filtering
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEventRequestLogsWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper> {
            return EventRequestLogControllerApiFp(configuration).getAllEventRequestLogsWithFilter(filterDto, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to the requesting App Client
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClient(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper> {
            return EventRequestLogControllerApiFp(configuration).getEventRequestLogsByAppClient(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber
         * @param {string} appId App Client ID
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClientId(appId: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper> {
            return EventRequestLogControllerApiFp(configuration).getEventRequestLogsByAppClientId(appId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber with filtering
         * @param {string} appId App Client ID
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClientIdWithFilter(appId: string, filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper> {
            return EventRequestLogControllerApiFp(configuration).getEventRequestLogsByAppClientIdWithFilter(appId, filterDto, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Any filters creating targeting appClientUser will be ignored
         * @summary Retrieves webhook requests sent to the requesting App Client with filtering
         * @param {FilterDto} filterDto 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRequestLogsByAppClientWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper> {
            return EventRequestLogControllerApiFp(configuration).getEventRequestLogsByAppClientWithFilter(filterDto, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventRequestLogControllerApi - interface
 * @export
 * @interface EventRequestLogControllerApi
 */
export interface EventRequestLogControllerApiInterface {
    /**
     * 
     * @summary Retrieves webhook requests sent to all pubsub event subscribers
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApiInterface
     */
    getAllEventRequestLogs(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>;

    /**
     * 
     * @summary Retrieves webhook requests sent to all pubsub event subscribers with filtering
     * @param {FilterDto} filterDto 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApiInterface
     */
    getAllEventRequestLogsWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>;

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to the requesting App Client
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApiInterface
     */
    getEventRequestLogsByAppClient(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>;

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber
     * @param {string} appId App Client ID
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApiInterface
     */
    getEventRequestLogsByAppClientId(appId: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>;

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber with filtering
     * @param {string} appId App Client ID
     * @param {FilterDto} filterDto 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApiInterface
     */
    getEventRequestLogsByAppClientIdWithFilter(appId: string, filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>;

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to the requesting App Client with filtering
     * @param {FilterDto} filterDto 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApiInterface
     */
    getEventRequestLogsByAppClientWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<EventRequestLogDtoPaginationResponseWrapper>;

}

/**
 * EventRequestLogControllerApi - object-oriented interface
 * @export
 * @class EventRequestLogControllerApi
 * @extends {BaseAPI}
 */
export class EventRequestLogControllerApi extends BaseAPI implements EventRequestLogControllerApiInterface {
    /**
     * 
     * @summary Retrieves webhook requests sent to all pubsub event subscribers
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApi
     */
    public getAllEventRequestLogs(page?: number, size?: number, sort?: Array<string>, options?: any) {
        return EventRequestLogControllerApiFp(this.configuration).getAllEventRequestLogs(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves webhook requests sent to all pubsub event subscribers with filtering
     * @param {FilterDto} filterDto 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApi
     */
    public getAllEventRequestLogsWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any) {
        return EventRequestLogControllerApiFp(this.configuration).getAllEventRequestLogsWithFilter(filterDto, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to the requesting App Client
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApi
     */
    public getEventRequestLogsByAppClient(page?: number, size?: number, sort?: Array<string>, options?: any) {
        return EventRequestLogControllerApiFp(this.configuration).getEventRequestLogsByAppClient(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber
     * @param {string} appId App Client ID
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApi
     */
    public getEventRequestLogsByAppClientId(appId: string, page?: number, size?: number, sort?: Array<string>, options?: any) {
        return EventRequestLogControllerApiFp(this.configuration).getEventRequestLogsByAppClientId(appId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to an App Client pubsub event subscriber with filtering
     * @param {string} appId App Client ID
     * @param {FilterDto} filterDto 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApi
     */
    public getEventRequestLogsByAppClientIdWithFilter(appId: string, filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any) {
        return EventRequestLogControllerApiFp(this.configuration).getEventRequestLogsByAppClientIdWithFilter(appId, filterDto, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Any filters creating targeting appClientUser will be ignored
     * @summary Retrieves webhook requests sent to the requesting App Client with filtering
     * @param {FilterDto} filterDto 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRequestLogControllerApi
     */
    public getEventRequestLogsByAppClientWithFilter(filterDto: FilterDto, page?: number, size?: number, sort?: Array<string>, options?: any) {
        return EventRequestLogControllerApiFp(this.configuration).getEventRequestLogsByAppClientWithFilter(filterDto, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}
