/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExceptionResponse,
    ExceptionResponseFromJSON,
    ExceptionResponseToJSON,
    SquadronDto,
    SquadronDtoFromJSON,
    SquadronDtoToJSON,
} from '../models';

export interface AddNewSquadronsRequest {
    squadronDto: Array<SquadronDto>;
}

export interface AddSquadronRequest {
    squadronDto: SquadronDto;
}

export interface AddSquadronMemberRequest {
    id: string;
    requestBody: Array<string>;
}

export interface DeleteSquadronRequest {
    id: string;
}

export interface DeleteSquadronMemberRequest {
    id: string;
    requestBody: Array<string>;
}

export interface GetSquadronRequest {
    id: string;
}

export interface ModifySquadronAttribsRequest {
    squadronId: string;
    requestBody: { [key: string]: string; };
}

export interface UpdateSquadronRequest {
    id: string;
    squadronDto: SquadronDto;
}

/**
 * 
 */
export class SquadronControllerApi extends runtime.BaseAPI {

    /**
     * Adds one or more squadron entities - returns that same array of input squadrons with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new squadrons up to the organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * Adds one or more squadron entities
     */
    async addNewSquadronsRaw(requestParameters: AddNewSquadronsRequest): Promise<runtime.ApiResponse<SquadronDto>> {
        if (requestParameters.squadronDto === null || requestParameters.squadronDto === undefined) {
            throw new runtime.RequiredError('squadronDto','Required parameter requestParameters.squadronDto was null or undefined when calling addNewSquadrons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/squadron/squadrons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.squadronDto.map(SquadronDtoToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SquadronDtoFromJSON(jsonValue));
    }

    /**
     * Adds one or more squadron entities - returns that same array of input squadrons with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new squadrons up to the organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * Adds one or more squadron entities
     */
    async addNewSquadrons(requestParameters: AddNewSquadronsRequest): Promise<SquadronDto> {
        const response = await this.addNewSquadronsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds a new squadron, ID field should be null
     * Adds a new squadron
     */
    async addSquadronRaw(requestParameters: AddSquadronRequest): Promise<runtime.ApiResponse<SquadronDto>> {
        if (requestParameters.squadronDto === null || requestParameters.squadronDto === undefined) {
            throw new runtime.RequiredError('squadronDto','Required parameter requestParameters.squadronDto was null or undefined when calling addSquadron.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/squadron`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SquadronDtoToJSON(requestParameters.squadronDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SquadronDtoFromJSON(jsonValue));
    }

    /**
     * Adds a new squadron, ID field should be null
     * Adds a new squadron
     */
    async addSquadron(requestParameters: AddSquadronRequest): Promise<SquadronDto> {
        const response = await this.addSquadronRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds member(s) to a squadron
     * Add member(s) to a squadron
     */
    async addSquadronMemberRaw(requestParameters: AddSquadronMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addSquadronMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling addSquadronMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/squadron/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds member(s) to a squadron
     * Add member(s) to a squadron
     */
    async addSquadronMember(requestParameters: AddSquadronMemberRequest): Promise<void> {
        await this.addSquadronMemberRaw(requestParameters);
    }

    /**
     * Removes a squadron record from the database
     * Deletes a squadron record
     */
    async deleteSquadronRaw(requestParameters: DeleteSquadronRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSquadron.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/squadron/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a squadron record from the database
     * Deletes a squadron record
     */
    async deleteSquadron(requestParameters: DeleteSquadronRequest): Promise<void> {
        await this.deleteSquadronRaw(requestParameters);
    }

    /**
     * Deletes a member(s) from a squadron
     * Deletes a member(s) from the squadron
     */
    async deleteSquadronMemberRaw(requestParameters: DeleteSquadronMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSquadronMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling deleteSquadronMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/squadron/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a member(s) from a squadron
     * Deletes a member(s) from the squadron
     */
    async deleteSquadronMember(requestParameters: DeleteSquadronMemberRequest): Promise<void> {
        await this.deleteSquadronMemberRaw(requestParameters);
    }

    /**
     * Retrieves all squadron records
     * Retrieves all squadrons
     */
    async getAllSquadronsRaw(): Promise<runtime.ApiResponse<Array<SquadronDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/squadron`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SquadronDtoFromJSON));
    }

    /**
     * Retrieves all squadron records
     * Retrieves all squadrons
     */
    async getAllSquadrons(): Promise<Array<SquadronDto>> {
        const response = await this.getAllSquadronsRaw();
        return await response.value();
    }

    /**
     * Retrieves single squadron record
     * Retrieves a single squadron by UUID
     */
    async getSquadronRaw(requestParameters: GetSquadronRequest): Promise<runtime.ApiResponse<SquadronDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSquadron.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/squadron/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SquadronDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves single squadron record
     * Retrieves a single squadron by UUID
     */
    async getSquadron(requestParameters: GetSquadronRequest): Promise<SquadronDto> {
        const response = await this.getSquadronRaw(requestParameters);
        return await response.value();
    }

    /**
     * Allows the squadron\'s attributes to be changed/cleared
     * Modifies a squadron\'s attributes
     */
    async modifySquadronAttribsRaw(requestParameters: ModifySquadronAttribsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.squadronId === null || requestParameters.squadronId === undefined) {
            throw new runtime.RequiredError('squadronId','Required parameter requestParameters.squadronId was null or undefined when calling modifySquadronAttribs.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling modifySquadronAttribs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/squadron/{squadronId}`.replace(`{${"squadronId"}}`, encodeURIComponent(String(requestParameters.squadronId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows the squadron\'s attributes to be changed/cleared
     * Modifies a squadron\'s attributes
     */
    async modifySquadronAttribs(requestParameters: ModifySquadronAttribsRequest): Promise<void> {
        await this.modifySquadronAttribsRaw(requestParameters);
    }

    /**
     * Updates an existing squadron
     * Updates an existing squadron record
     */
    async updateSquadronRaw(requestParameters: UpdateSquadronRequest): Promise<runtime.ApiResponse<SquadronDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSquadron.');
        }

        if (requestParameters.squadronDto === null || requestParameters.squadronDto === undefined) {
            throw new runtime.RequiredError('squadronDto','Required parameter requestParameters.squadronDto was null or undefined when calling updateSquadron.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/squadron/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SquadronDtoToJSON(requestParameters.squadronDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SquadronDtoFromJSON(jsonValue));
    }

    /**
     * Updates an existing squadron
     * Updates an existing squadron record
     */
    async updateSquadron(requestParameters: UpdateSquadronRequest): Promise<SquadronDto> {
        const response = await this.updateSquadronRaw(requestParameters);
        return await response.value();
    }

}
