/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { PrivilegeDto } from '../models';
/**
 * PrivilegeControllerApi - axios parameter creator
 * @export
 */
export const PrivilegeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves Privilege information
         * @summary Retrieves all Privilege information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivileges: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/privilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing Privilege
         * @summary Updates an existing Privilege
         * @param {number} id App Client ID to update
         * @param {PrivilegeDto} privilegeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrivilege: async (id: number, privilegeDto: PrivilegeDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePrivilege.');
            }
            // verify required parameter 'privilegeDto' is not null or undefined
            if (privilegeDto === null || privilegeDto === undefined) {
                throw new RequiredError('privilegeDto','Required parameter privilegeDto was null or undefined when calling updatePrivilege.');
            }
            const localVarPath = `/v1/privilege/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof privilegeDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(privilegeDto !== undefined ? privilegeDto : {})
                : (privilegeDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivilegeControllerApi - functional programming interface
 * @export
 */
export const PrivilegeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves Privilege information
         * @summary Retrieves all Privilege information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivileges(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrivilegeDto>>> {
            const localVarAxiosArgs = await PrivilegeControllerApiAxiosParamCreator(configuration).getPrivileges(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing Privilege
         * @summary Updates an existing Privilege
         * @param {number} id App Client ID to update
         * @param {PrivilegeDto} privilegeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrivilege(id: number, privilegeDto: PrivilegeDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivilegeDto>> {
            const localVarAxiosArgs = await PrivilegeControllerApiAxiosParamCreator(configuration).updatePrivilege(id, privilegeDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PrivilegeControllerApi - factory interface
 * @export
 */
export const PrivilegeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves Privilege information
         * @summary Retrieves all Privilege information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivileges(options?: any): AxiosPromise<Array<PrivilegeDto>> {
            return PrivilegeControllerApiFp(configuration).getPrivileges(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing Privilege
         * @summary Updates an existing Privilege
         * @param {number} id App Client ID to update
         * @param {PrivilegeDto} privilegeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrivilege(id: number, privilegeDto: PrivilegeDto, options?: any): AxiosPromise<PrivilegeDto> {
            return PrivilegeControllerApiFp(configuration).updatePrivilege(id, privilegeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrivilegeControllerApi - interface
 * @export
 * @interface PrivilegeControllerApi
 */
export interface PrivilegeControllerApiInterface {
    /**
     * Retrieves Privilege information
     * @summary Retrieves all Privilege information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeControllerApiInterface
     */
    getPrivileges(options?: any): AxiosPromise<Array<PrivilegeDto>>;

    /**
     * Updates an existing Privilege
     * @summary Updates an existing Privilege
     * @param {number} id App Client ID to update
     * @param {PrivilegeDto} privilegeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeControllerApiInterface
     */
    updatePrivilege(id: number, privilegeDto: PrivilegeDto, options?: any): AxiosPromise<PrivilegeDto>;

}

/**
 * PrivilegeControllerApi - object-oriented interface
 * @export
 * @class PrivilegeControllerApi
 * @extends {BaseAPI}
 */
export class PrivilegeControllerApi extends BaseAPI implements PrivilegeControllerApiInterface {
    /**
     * Retrieves Privilege information
     * @summary Retrieves all Privilege information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeControllerApi
     */
    public getPrivileges(options?: any) {
        return PrivilegeControllerApiFp(this.configuration).getPrivileges(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing Privilege
     * @summary Updates an existing Privilege
     * @param {number} id App Client ID to update
     * @param {PrivilegeDto} privilegeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeControllerApi
     */
    public updatePrivilege(id: number, privilegeDto: PrivilegeDto, options?: any) {
        return PrivilegeControllerApiFp(this.configuration).updatePrivilege(id, privilegeDto, options).then((request) => request(this.axios, this.basePath));
    }
}
