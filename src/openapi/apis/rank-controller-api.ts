/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Rank } from '../models';
/**
 * RankControllerApi - axios parameter creator
 * @export
 */
export const RankControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves information for a particular rank
         * @summary Retrieves information for a particular rank
         * @param {string} branch 
         * @param {string} abbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRank: async (branch: string, abbreviation: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'branch' is not null or undefined
            if (branch === null || branch === undefined) {
                throw new RequiredError('branch','Required parameter branch was null or undefined when calling getRank.');
            }
            // verify required parameter 'abbreviation' is not null or undefined
            if (abbreviation === null || abbreviation === undefined) {
                throw new RequiredError('abbreviation','Required parameter abbreviation was null or undefined when calling getRank.');
            }
            const localVarPath = `/v2/rank/{branch}/{abbreviation}`
                .replace(`{${"branch"}}`, encodeURIComponent(String(branch)))
                .replace(`{${"abbreviation"}}`, encodeURIComponent(String(abbreviation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all ranks for a particular branch
         * @summary Retrieves all ranks for a particular branch
         * @param {string} branch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanks: async (branch: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'branch' is not null or undefined
            if (branch === null || branch === undefined) {
                throw new RequiredError('branch','Required parameter branch was null or undefined when calling getRanks.');
            }
            const localVarPath = `/v2/rank/{branch}`
                .replace(`{${"branch"}}`, encodeURIComponent(String(branch)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all ranks
         * @summary Retrieves all ranks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanks1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/rank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RankControllerApi - functional programming interface
 * @export
 */
export const RankControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves information for a particular rank
         * @summary Retrieves information for a particular rank
         * @param {string} branch 
         * @param {string} abbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRank(branch: string, abbreviation: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rank>> {
            const localVarAxiosArgs = await RankControllerApiAxiosParamCreator(configuration).getRank(branch, abbreviation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all ranks for a particular branch
         * @summary Retrieves all ranks for a particular branch
         * @param {string} branch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRanks(branch: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rank>>> {
            const localVarAxiosArgs = await RankControllerApiAxiosParamCreator(configuration).getRanks(branch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all ranks
         * @summary Retrieves all ranks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRanks1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rank>>> {
            const localVarAxiosArgs = await RankControllerApiAxiosParamCreator(configuration).getRanks1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RankControllerApi - factory interface
 * @export
 */
export const RankControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves information for a particular rank
         * @summary Retrieves information for a particular rank
         * @param {string} branch 
         * @param {string} abbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRank(branch: string, abbreviation: string, options?: any): AxiosPromise<Rank> {
            return RankControllerApiFp(configuration).getRank(branch, abbreviation, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all ranks for a particular branch
         * @summary Retrieves all ranks for a particular branch
         * @param {string} branch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanks(branch: string, options?: any): AxiosPromise<Array<Rank>> {
            return RankControllerApiFp(configuration).getRanks(branch, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all ranks
         * @summary Retrieves all ranks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanks1(options?: any): AxiosPromise<Array<Rank>> {
            return RankControllerApiFp(configuration).getRanks1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RankControllerApi - interface
 * @export
 * @interface RankControllerApi
 */
export interface RankControllerApiInterface {
    /**
     * Retrieves information for a particular rank
     * @summary Retrieves information for a particular rank
     * @param {string} branch 
     * @param {string} abbreviation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankControllerApiInterface
     */
    getRank(branch: string, abbreviation: string, options?: any): AxiosPromise<Rank>;

    /**
     * Retrieves all ranks for a particular branch
     * @summary Retrieves all ranks for a particular branch
     * @param {string} branch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankControllerApiInterface
     */
    getRanks(branch: string, options?: any): AxiosPromise<Array<Rank>>;

    /**
     * Retrieves all ranks
     * @summary Retrieves all ranks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankControllerApiInterface
     */
    getRanks1(options?: any): AxiosPromise<Array<Rank>>;

}

/**
 * RankControllerApi - object-oriented interface
 * @export
 * @class RankControllerApi
 * @extends {BaseAPI}
 */
export class RankControllerApi extends BaseAPI implements RankControllerApiInterface {
    /**
     * Retrieves information for a particular rank
     * @summary Retrieves information for a particular rank
     * @param {string} branch 
     * @param {string} abbreviation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankControllerApi
     */
    public getRank(branch: string, abbreviation: string, options?: any) {
        return RankControllerApiFp(this.configuration).getRank(branch, abbreviation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all ranks for a particular branch
     * @summary Retrieves all ranks for a particular branch
     * @param {string} branch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankControllerApi
     */
    public getRanks(branch: string, options?: any) {
        return RankControllerApiFp(this.configuration).getRanks(branch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all ranks
     * @summary Retrieves all ranks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankControllerApi
     */
    public getRanks1(options?: any) {
        return RankControllerApiFp(this.configuration).getRanks1(options).then((request) => request(this.axios, this.basePath));
    }
}
