/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Airman,
    AirmanFromJSON,
    AirmanToJSON,
    ExceptionResponse,
    ExceptionResponseFromJSON,
    ExceptionResponseToJSON,
} from '../models';

export interface AddAirmanRequest {
    airman: Airman;
}

export interface AddAirmenRequest {
    airman: Array<Airman>;
}

export interface DeleteAirmanRequest {
    id: string;
}

export interface GetAirmanRequest {
    id: string;
}

export interface UpdateAirmanRequest {
    id: string;
    airman: Airman;
}

/**
 * 
 */
export class AirmanControllerApi extends runtime.BaseAPI {

    /**
     * Adds a new airman, ID field should be null for a new addition.
     * Adds a new airman
     */
    async addAirmanRaw(requestParameters: AddAirmanRequest): Promise<runtime.ApiResponse<Airman>> {
        if (requestParameters.airman === null || requestParameters.airman === undefined) {
            throw new runtime.RequiredError('airman','Required parameter requestParameters.airman was null or undefined when calling addAirman.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/airman`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AirmanToJSON(requestParameters.airman),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AirmanFromJSON(jsonValue));
    }

    /**
     * Adds a new airman, ID field should be null for a new addition.
     * Adds a new airman
     */
    async addAirman(requestParameters: AddAirmanRequest): Promise<Airman> {
        const response = await this.addAirmanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds one or more airmen entities - returns that same array of input airmen with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then no new airmen will have been committed to the database (if one entity fails, the entire operation fails). The return error message will list the offending UUID or other data that caused the error.
     * Adds one or more airmen entities
     */
    async addAirmenRaw(requestParameters: AddAirmenRequest): Promise<runtime.ApiResponse<Airman>> {
        if (requestParameters.airman === null || requestParameters.airman === undefined) {
            throw new runtime.RequiredError('airman','Required parameter requestParameters.airman was null or undefined when calling addAirmen.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/airman/airmen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.airman.map(AirmanToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AirmanFromJSON(jsonValue));
    }

    /**
     * Adds one or more airmen entities - returns that same array of input airmen with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then no new airmen will have been committed to the database (if one entity fails, the entire operation fails). The return error message will list the offending UUID or other data that caused the error.
     * Adds one or more airmen entities
     */
    async addAirmen(requestParameters: AddAirmenRequest): Promise<Airman> {
        const response = await this.addAirmenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes an airman record from the database
     * Deletes an airman record
     */
    async deleteAirmanRaw(requestParameters: DeleteAirmanRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAirman.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/airman/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes an airman record from the database
     * Deletes an airman record
     */
    async deleteAirman(requestParameters: DeleteAirmanRequest): Promise<void> {
        await this.deleteAirmanRaw(requestParameters);
    }

    /**
     * Retrieves single airman record
     * Retrieves a single airman by UUID
     */
    async getAirmanRaw(requestParameters: GetAirmanRequest): Promise<runtime.ApiResponse<Airman>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAirman.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/airman/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AirmanFromJSON(jsonValue));
    }

    /**
     * Retrieves single airman record
     * Retrieves a single airman by UUID
     */
    async getAirman(requestParameters: GetAirmanRequest): Promise<Airman> {
        const response = await this.getAirmanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves all airmen records
     * Retrieves all airmen
     */
    async getAllAirmanRaw(): Promise<runtime.ApiResponse<Array<Airman>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/airman`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AirmanFromJSON));
    }

    /**
     * Retrieves all airmen records
     * Retrieves all airmen
     */
    async getAllAirman(): Promise<Array<Airman>> {
        const response = await this.getAllAirmanRaw();
        return await response.value();
    }

    /**
     * Updates an existing airman
     * Updates an existing airman record
     */
    async updateAirmanRaw(requestParameters: UpdateAirmanRequest): Promise<runtime.ApiResponse<Airman>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAirman.');
        }

        if (requestParameters.airman === null || requestParameters.airman === undefined) {
            throw new runtime.RequiredError('airman','Required parameter requestParameters.airman was null or undefined when calling updateAirman.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/airman/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AirmanToJSON(requestParameters.airman),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AirmanFromJSON(jsonValue));
    }

    /**
     * Updates an existing airman
     * Updates an existing airman record
     */
    async updateAirman(requestParameters: UpdateAirmanRequest): Promise<Airman> {
        const response = await this.updateAirmanRaw(requestParameters);
        return await response.value();
    }

}
