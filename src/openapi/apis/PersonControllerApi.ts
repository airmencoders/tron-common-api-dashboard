/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExceptionResponse,
    ExceptionResponseFromJSON,
    ExceptionResponseToJSON,
    Person,
    PersonFromJSON,
    PersonToJSON,
} from '../models';

export interface AddPersonsRequest {
    person: Array<Person>;
}

export interface CreatePersonRequest {
    person: Person;
}

export interface DeletePersonRequest {
    id: string;
}

export interface GetPersonRequest {
    id: string;
}

export interface UpdatePersonRequest {
    id: string;
    person: Person;
}

/**
 * 
 */
export class PersonControllerApi extends runtime.BaseAPI {

    /**
     * Adds one or more person entities - returns that same array of input persons with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then no new persons will have been committed to the database (if one entity fails, the entire operation fails). The return error message will list the offending UUID or other data that caused the error.
     * Add one or more members to the database
     */
    async addPersonsRaw(requestParameters: AddPersonsRequest): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling addPersons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/person/persons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.person.map(PersonToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * Adds one or more person entities - returns that same array of input persons with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then no new persons will have been committed to the database (if one entity fails, the entire operation fails). The return error message will list the offending UUID or other data that caused the error.
     * Add one or more members to the database
     */
    async addPersons(requestParameters: AddPersonsRequest): Promise<Person> {
        const response = await this.addPersonsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds a person
     * Adds a person
     */
    async createPersonRaw(requestParameters: CreatePersonRequest): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling createPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/person`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters.person),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * Adds a person
     * Adds a person
     */
    async createPerson(requestParameters: CreatePersonRequest): Promise<Person> {
        const response = await this.createPersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an existing person
     * Deletes an existing person
     */
    async deletePersonRaw(requestParameters: DeletePersonRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing person
     * Deletes an existing person
     */
    async deletePerson(requestParameters: DeletePersonRequest): Promise<void> {
        await this.deletePersonRaw(requestParameters);
    }

    /**
     * Retrieves a person by ID
     * Retrieves a person by ID
     */
    async getPersonRaw(requestParameters: GetPersonRequest): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * Retrieves a person by ID
     * Retrieves a person by ID
     */
    async getPerson(requestParameters: GetPersonRequest): Promise<Person> {
        const response = await this.getPersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves all persons
     * Retrieves all persons
     */
    async getPersonsRaw(): Promise<runtime.ApiResponse<Array<Person>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/person`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonFromJSON));
    }

    /**
     * Retrieves all persons
     * Retrieves all persons
     */
    async getPersons(): Promise<Array<Person>> {
        const response = await this.getPersonsRaw();
        return await response.value();
    }

    /**
     * Updates an existing person
     * Updates an existing person
     */
    async updatePersonRaw(requestParameters: UpdatePersonRequest): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePerson.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling updatePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters.person),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * Updates an existing person
     * Updates an existing person
     */
    async updatePerson(requestParameters: UpdatePersonRequest): Promise<Person> {
        const response = await this.updatePersonRaw(requestParameters);
        return await response.value();
    }

}
