/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DocumentSpaceDashboardMemberRequestDto } from '../models';
// @ts-ignore
import { DocumentSpaceDashboardMemberResponseDtoResponseWrapper } from '../models';
// @ts-ignore
import { DocumentSpaceRequestDto } from '../models';
// @ts-ignore
import { DocumentSpaceResponseDto } from '../models';
// @ts-ignore
import { DocumentSpaceResponseDtoResponseWrapper } from '../models';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { S3PaginationDto } from '../models';
/**
 * DocumentSpaceControllerApi - axios parameter creator
 * @export
 */
export const DocumentSpaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes file from a space
         * @summary Deletes a file from a Document Space
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, file: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling _delete.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling _delete.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/files/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a user to a Document Space with specified privileges
         * @summary Adds a user to a Document Space
         * @param {string} id 
         * @param {DocumentSpaceDashboardMemberRequestDto} documentSpaceDashboardMemberRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToDocumentSpace: async (id: string, documentSpaceDashboardMemberRequestDto: DocumentSpaceDashboardMemberRequestDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addUserToDocumentSpace.');
            }
            // verify required parameter 'documentSpaceDashboardMemberRequestDto' is not null or undefined
            if (documentSpaceDashboardMemberRequestDto === null || documentSpaceDashboardMemberRequestDto === undefined) {
                throw new RequiredError('documentSpaceDashboardMemberRequestDto','Required parameter documentSpaceDashboardMemberRequestDto was null or undefined when calling addUserToDocumentSpace.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof documentSpaceDashboardMemberRequestDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(documentSpaceDashboardMemberRequestDto !== undefined ? documentSpaceDashboardMemberRequestDto : {})
                : (documentSpaceDashboardMemberRequestDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Document Space
         * @summary Creates a Document Space
         * @param {DocumentSpaceRequestDto} documentSpaceRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpace: async (documentSpaceRequestDto: DocumentSpaceRequestDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentSpaceRequestDto' is not null or undefined
            if (documentSpaceRequestDto === null || documentSpaceRequestDto === undefined) {
                throw new RequiredError('documentSpaceRequestDto','Required parameter documentSpaceRequestDto was null or undefined when calling createSpace.');
            }
            const localVarPath = `/v2/document-space/spaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof documentSpaceRequestDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(documentSpaceRequestDto !== undefined ? documentSpaceRequestDto : {})
                : (documentSpaceRequestDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Document Space
         * @summary Deletes a Document Space
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpace: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSpace.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads all files from a space as a zip file
         * @summary Download all files from a Document Space
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAllFilesInSpace: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling downloadAllFilesInSpace.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/files/download/all`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Download a single file from a Document Space
         * @summary Download from a Document Space
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (id: string, file: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling downloadFile.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling downloadFile.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/files/download/single`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads multiple files from a space as a zip file
         * @summary Download multiple files from a Document Space
         * @param {string} id 
         * @param {Set<string>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFiles: async (id: string, files: Set<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling downloadFiles.');
            }
            // verify required parameter 'files' is not null or undefined
            if (files === null || files === undefined) {
                throw new RequiredError('files','Required parameter files was null or undefined when calling downloadFiles.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/files/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (files) {
                localVarQueryParameter['files'] = files;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets members for a Document Space. Pagination enabled.
         * @summary Gets the members for a Document Space
         * @param {string} id 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardUsersForDocumentSpace: async (id: string, page?: number, size?: number, sort?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDashboardUsersForDocumentSpace.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/users/dashboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all document spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/document-space/spaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets files from a space. This is not a download
         * @summary Retrieves files from a space
         * @param {string} id 
         * @param {string} [continuation] the continuation token
         * @param {number} [limit] page limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (id: string, continuation?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listObjects.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (continuation !== undefined) {
                localVarQueryParameter['continuation'] = continuation;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads a file to a Document Space
         * @summary Uploads a file to a Document Space
         * @param {string} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (id: string, file?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling upload.');
            }
            const localVarPath = `/v2/document-space/spaces/{id}/files/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentSpaceControllerApi - functional programming interface
 * @export
 */
export const DocumentSpaceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes file from a space
         * @summary Deletes a file from a Document Space
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, file: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration)._delete(id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a user to a Document Space with specified privileges
         * @summary Adds a user to a Document Space
         * @param {string} id 
         * @param {DocumentSpaceDashboardMemberRequestDto} documentSpaceDashboardMemberRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToDocumentSpace(id: string, documentSpaceDashboardMemberRequestDto: DocumentSpaceDashboardMemberRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).addUserToDocumentSpace(id, documentSpaceDashboardMemberRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Document Space
         * @summary Creates a Document Space
         * @param {DocumentSpaceRequestDto} documentSpaceRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpace(documentSpaceRequestDto: DocumentSpaceRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSpaceResponseDto>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).createSpace(documentSpaceRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Document Space
         * @summary Deletes a Document Space
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpace(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).deleteSpace(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Downloads all files from a space as a zip file
         * @summary Download all files from a Document Space
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAllFilesInSpace(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).downloadAllFilesInSpace(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Download a single file from a Document Space
         * @summary Download from a Document Space
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(id: string, file: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).downloadFile(id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Downloads multiple files from a space as a zip file
         * @summary Download multiple files from a Document Space
         * @param {string} id 
         * @param {Set<string>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFiles(id: string, files: Set<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).downloadFiles(id, files, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets members for a Document Space. Pagination enabled.
         * @summary Gets the members for a Document Space
         * @param {string} id 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardUsersForDocumentSpace(id: string, page?: number, size?: number, sort?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSpaceDashboardMemberResponseDtoResponseWrapper>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).getDashboardUsersForDocumentSpace(id, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all document spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSpaceResponseDtoResponseWrapper>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).getSpaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets files from a space. This is not a download
         * @summary Retrieves files from a space
         * @param {string} id 
         * @param {string} [continuation] the continuation token
         * @param {number} [limit] page limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(id: string, continuation?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3PaginationDto>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).listObjects(id, continuation, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Uploads a file to a Document Space
         * @summary Uploads a file to a Document Space
         * @param {string} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(id: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).upload(id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentSpaceControllerApi - factory interface
 * @export
 */
export const DocumentSpaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes file from a space
         * @summary Deletes a file from a Document Space
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, file: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration)._delete(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a user to a Document Space with specified privileges
         * @summary Adds a user to a Document Space
         * @param {string} id 
         * @param {DocumentSpaceDashboardMemberRequestDto} documentSpaceDashboardMemberRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToDocumentSpace(id: string, documentSpaceDashboardMemberRequestDto: DocumentSpaceDashboardMemberRequestDto, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration).addUserToDocumentSpace(id, documentSpaceDashboardMemberRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Document Space
         * @summary Creates a Document Space
         * @param {DocumentSpaceRequestDto} documentSpaceRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpace(documentSpaceRequestDto: DocumentSpaceRequestDto, options?: any): AxiosPromise<DocumentSpaceResponseDto> {
            return DocumentSpaceControllerApiFp(configuration).createSpace(documentSpaceRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Document Space
         * @summary Deletes a Document Space
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpace(id: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration).deleteSpace(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads all files from a space as a zip file
         * @summary Download all files from a Document Space
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAllFilesInSpace(id: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration).downloadAllFilesInSpace(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Download a single file from a Document Space
         * @summary Download from a Document Space
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(id: string, file: string, options?: any): AxiosPromise<any> {
            return DocumentSpaceControllerApiFp(configuration).downloadFile(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads multiple files from a space as a zip file
         * @summary Download multiple files from a Document Space
         * @param {string} id 
         * @param {Set<string>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFiles(id: string, files: Set<string>, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration).downloadFiles(id, files, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets members for a Document Space. Pagination enabled.
         * @summary Gets the members for a Document Space
         * @param {string} id 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardUsersForDocumentSpace(id: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<DocumentSpaceDashboardMemberResponseDtoResponseWrapper> {
            return DocumentSpaceControllerApiFp(configuration).getDashboardUsersForDocumentSpace(id, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all document spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaces(options?: any): AxiosPromise<DocumentSpaceResponseDtoResponseWrapper> {
            return DocumentSpaceControllerApiFp(configuration).getSpaces(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets files from a space. This is not a download
         * @summary Retrieves files from a space
         * @param {string} id 
         * @param {string} [continuation] the continuation token
         * @param {number} [limit] page limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(id: string, continuation?: string, limit?: number, options?: any): AxiosPromise<S3PaginationDto> {
            return DocumentSpaceControllerApiFp(configuration).listObjects(id, continuation, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads a file to a Document Space
         * @summary Uploads a file to a Document Space
         * @param {string} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(id: string, file?: any, options?: any): AxiosPromise<{ [key: string]: string; }> {
            return DocumentSpaceControllerApiFp(configuration).upload(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentSpaceControllerApi - interface
 * @export
 * @interface DocumentSpaceControllerApi
 */
export interface DocumentSpaceControllerApiInterface {
    /**
     * Deletes file from a space
     * @summary Deletes a file from a Document Space
     * @param {string} id 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    _delete(id: string, file: string, options?: any): AxiosPromise<object>;

    /**
     * Adds a user to a Document Space with specified privileges
     * @summary Adds a user to a Document Space
     * @param {string} id 
     * @param {DocumentSpaceDashboardMemberRequestDto} documentSpaceDashboardMemberRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    addUserToDocumentSpace(id: string, documentSpaceDashboardMemberRequestDto: DocumentSpaceDashboardMemberRequestDto, options?: any): AxiosPromise<object>;

    /**
     * Creates a Document Space
     * @summary Creates a Document Space
     * @param {DocumentSpaceRequestDto} documentSpaceRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    createSpace(documentSpaceRequestDto: DocumentSpaceRequestDto, options?: any): AxiosPromise<DocumentSpaceResponseDto>;

    /**
     * Deletes a Document Space
     * @summary Deletes a Document Space
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    deleteSpace(id: string, options?: any): AxiosPromise<object>;

    /**
     * Downloads all files from a space as a zip file
     * @summary Download all files from a Document Space
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    downloadAllFilesInSpace(id: string, options?: any): AxiosPromise<object>;

    /**
     * Download a single file from a Document Space
     * @summary Download from a Document Space
     * @param {string} id 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    downloadFile(id: string, file: string, options?: any): AxiosPromise<any>;

    /**
     * Downloads multiple files from a space as a zip file
     * @summary Download multiple files from a Document Space
     * @param {string} id 
     * @param {Set<string>} files 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    downloadFiles(id: string, files: Set<string>, options?: any): AxiosPromise<object>;

    /**
     * Gets members for a Document Space. Pagination enabled.
     * @summary Gets the members for a Document Space
     * @param {string} id 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    getDashboardUsersForDocumentSpace(id: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<DocumentSpaceDashboardMemberResponseDtoResponseWrapper>;

    /**
     * 
     * @summary Retrieves all document spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    getSpaces(options?: any): AxiosPromise<DocumentSpaceResponseDtoResponseWrapper>;

    /**
     * Gets files from a space. This is not a download
     * @summary Retrieves files from a space
     * @param {string} id 
     * @param {string} [continuation] the continuation token
     * @param {number} [limit] page limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    listObjects(id: string, continuation?: string, limit?: number, options?: any): AxiosPromise<S3PaginationDto>;

    /**
     * Uploads a file to a Document Space
     * @summary Uploads a file to a Document Space
     * @param {string} id 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    upload(id: string, file?: any, options?: any): AxiosPromise<{ [key: string]: string; }>;

}

/**
 * DocumentSpaceControllerApi - object-oriented interface
 * @export
 * @class DocumentSpaceControllerApi
 * @extends {BaseAPI}
 */
export class DocumentSpaceControllerApi extends BaseAPI implements DocumentSpaceControllerApiInterface {
    /**
     * Deletes file from a space
     * @summary Deletes a file from a Document Space
     * @param {string} id 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public _delete(id: string, file: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration)._delete(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a user to a Document Space with specified privileges
     * @summary Adds a user to a Document Space
     * @param {string} id 
     * @param {DocumentSpaceDashboardMemberRequestDto} documentSpaceDashboardMemberRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public addUserToDocumentSpace(id: string, documentSpaceDashboardMemberRequestDto: DocumentSpaceDashboardMemberRequestDto, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).addUserToDocumentSpace(id, documentSpaceDashboardMemberRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Document Space
     * @summary Creates a Document Space
     * @param {DocumentSpaceRequestDto} documentSpaceRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public createSpace(documentSpaceRequestDto: DocumentSpaceRequestDto, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).createSpace(documentSpaceRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Document Space
     * @summary Deletes a Document Space
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public deleteSpace(id: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).deleteSpace(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downloads all files from a space as a zip file
     * @summary Download all files from a Document Space
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public downloadAllFilesInSpace(id: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).downloadAllFilesInSpace(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download a single file from a Document Space
     * @summary Download from a Document Space
     * @param {string} id 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public downloadFile(id: string, file: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).downloadFile(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downloads multiple files from a space as a zip file
     * @summary Download multiple files from a Document Space
     * @param {string} id 
     * @param {Set<string>} files 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public downloadFiles(id: string, files: Set<string>, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).downloadFiles(id, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets members for a Document Space. Pagination enabled.
     * @summary Gets the members for a Document Space
     * @param {string} id 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public getDashboardUsersForDocumentSpace(id: string, page?: number, size?: number, sort?: Array<string>, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).getDashboardUsersForDocumentSpace(id, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all document spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public getSpaces(options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).getSpaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets files from a space. This is not a download
     * @summary Retrieves files from a space
     * @param {string} id 
     * @param {string} [continuation] the continuation token
     * @param {number} [limit] page limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public listObjects(id: string, continuation?: string, limit?: number, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).listObjects(id, continuation, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads a file to a Document Space
     * @summary Uploads a file to a Document Space
     * @param {string} id 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public upload(id: string, file?: any, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).upload(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}
