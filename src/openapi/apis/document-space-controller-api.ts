/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DocumentSpaceInfoDto } from '../models';
// @ts-ignore
import { DocumentSpaceInfoDtoResponseWrapper } from '../models';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { S3PaginationDto } from '../models';
/**
 * DocumentSpaceControllerApi - axios parameter creator
 * @export
 */
export const DocumentSpaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes file from a space
         * @summary Deletes from a Document Space
         * @param {string} space 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (space: string, keyName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'space' is not null or undefined
            if (space === null || space === undefined) {
                throw new RequiredError('space','Required parameter space was null or undefined when calling _delete.');
            }
            // verify required parameter 'keyName' is not null or undefined
            if (keyName === null || keyName === undefined) {
                throw new RequiredError('keyName','Required parameter keyName was null or undefined when calling _delete.');
            }
            const localVarPath = `/v2/document-space/files/{space}/{keyName}`
                .replace(`{${"space"}}`, encodeURIComponent(String(space)))
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Document Space
         * @summary Creates a Document Space
         * @param {DocumentSpaceInfoDto} documentSpaceInfoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpace: async (documentSpaceInfoDto: DocumentSpaceInfoDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentSpaceInfoDto' is not null or undefined
            if (documentSpaceInfoDto === null || documentSpaceInfoDto === undefined) {
                throw new RequiredError('documentSpaceInfoDto','Required parameter documentSpaceInfoDto was null or undefined when calling createSpace.');
            }
            const localVarPath = `/v2/document-space/spaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof documentSpaceInfoDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(documentSpaceInfoDto !== undefined ? documentSpaceInfoDto : {})
                : (documentSpaceInfoDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Document Space
         * @summary Deletes a Document Space
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpace: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteSpace.');
            }
            const localVarPath = `/v2/document-space/spaces/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Download a single file from a Document Space
         * @summary Download from a Document Space
         * @param {string} space 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (space: string, keyName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'space' is not null or undefined
            if (space === null || space === undefined) {
                throw new RequiredError('space','Required parameter space was null or undefined when calling downloadFile.');
            }
            // verify required parameter 'keyName' is not null or undefined
            if (keyName === null || keyName === undefined) {
                throw new RequiredError('keyName','Required parameter keyName was null or undefined when calling downloadFile.');
            }
            const localVarPath = `/v2/document-space/file/{space}/{keyName}`
                .replace(`{${"space"}}`, encodeURIComponent(String(space)))
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads multiple files from a space as a zip file
         * @summary Download multiple files from a Document Space
         * @param {string} space 
         * @param {Set<string>} keyNames 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFiles: async (space: string, keyNames: Set<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'space' is not null or undefined
            if (space === null || space === undefined) {
                throw new RequiredError('space','Required parameter space was null or undefined when calling downloadFiles.');
            }
            // verify required parameter 'keyNames' is not null or undefined
            if (keyNames === null || keyNames === undefined) {
                throw new RequiredError('keyNames','Required parameter keyNames was null or undefined when calling downloadFiles.');
            }
            const localVarPath = `/v2/document-space/files/{space}/{keyNames}`
                .replace(`{${"space"}}`, encodeURIComponent(String(space)))
                .replace(`{${"keyNames"}}`, encodeURIComponent(String(keyNames)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all document space names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/document-space/spaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets files from a space. This is not a download
         * @summary Retrieves files from a space
         * @param {string} space 
         * @param {string} [continuation] the continuation token
         * @param {number} [limit] page limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (space: string, continuation?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'space' is not null or undefined
            if (space === null || space === undefined) {
                throw new RequiredError('space','Required parameter space was null or undefined when calling listObjects.');
            }
            const localVarPath = `/v2/document-space/files/{space}`
                .replace(`{${"space"}}`, encodeURIComponent(String(space)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (continuation !== undefined) {
                localVarQueryParameter['continuation'] = continuation;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads a file to a Document Space
         * @summary Uploads a file to a Document Space
         * @param {string} space 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (space: string, file?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'space' is not null or undefined
            if (space === null || space === undefined) {
                throw new RequiredError('space','Required parameter space was null or undefined when calling upload.');
            }
            const localVarPath = `/v2/document-space/files/{space}`
                .replace(`{${"space"}}`, encodeURIComponent(String(space)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentSpaceControllerApi - functional programming interface
 * @export
 */
export const DocumentSpaceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes file from a space
         * @summary Deletes from a Document Space
         * @param {string} space 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(space: string, keyName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration)._delete(space, keyName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Document Space
         * @summary Creates a Document Space
         * @param {DocumentSpaceInfoDto} documentSpaceInfoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpace(documentSpaceInfoDto: DocumentSpaceInfoDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSpaceInfoDto>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).createSpace(documentSpaceInfoDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Document Space
         * @summary Deletes a Document Space
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpace(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).deleteSpace(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Download a single file from a Document Space
         * @summary Download from a Document Space
         * @param {string} space 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(space: string, keyName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).downloadFile(space, keyName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Downloads multiple files from a space as a zip file
         * @summary Download multiple files from a Document Space
         * @param {string} space 
         * @param {Set<string>} keyNames 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFiles(space: string, keyNames: Set<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).downloadFiles(space, keyNames, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all document space names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSpaceInfoDtoResponseWrapper>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).getSpaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets files from a space. This is not a download
         * @summary Retrieves files from a space
         * @param {string} space 
         * @param {string} [continuation] the continuation token
         * @param {number} [limit] page limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(space: string, continuation?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3PaginationDto>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).listObjects(space, continuation, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Uploads a file to a Document Space
         * @summary Uploads a file to a Document Space
         * @param {string} space 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(space: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await DocumentSpaceControllerApiAxiosParamCreator(configuration).upload(space, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentSpaceControllerApi - factory interface
 * @export
 */
export const DocumentSpaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes file from a space
         * @summary Deletes from a Document Space
         * @param {string} space 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(space: string, keyName: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration)._delete(space, keyName, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Document Space
         * @summary Creates a Document Space
         * @param {DocumentSpaceInfoDto} documentSpaceInfoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpace(documentSpaceInfoDto: DocumentSpaceInfoDto, options?: any): AxiosPromise<DocumentSpaceInfoDto> {
            return DocumentSpaceControllerApiFp(configuration).createSpace(documentSpaceInfoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Document Space
         * @summary Deletes a Document Space
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpace(name: string, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration).deleteSpace(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Download a single file from a Document Space
         * @summary Download from a Document Space
         * @param {string} space 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(space: string, keyName: string, options?: any): AxiosPromise<any> {
            return DocumentSpaceControllerApiFp(configuration).downloadFile(space, keyName, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads multiple files from a space as a zip file
         * @summary Download multiple files from a Document Space
         * @param {string} space 
         * @param {Set<string>} keyNames 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFiles(space: string, keyNames: Set<string>, options?: any): AxiosPromise<object> {
            return DocumentSpaceControllerApiFp(configuration).downloadFiles(space, keyNames, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all document space names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaces(options?: any): AxiosPromise<DocumentSpaceInfoDtoResponseWrapper> {
            return DocumentSpaceControllerApiFp(configuration).getSpaces(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets files from a space. This is not a download
         * @summary Retrieves files from a space
         * @param {string} space 
         * @param {string} [continuation] the continuation token
         * @param {number} [limit] page limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(space: string, continuation?: string, limit?: number, options?: any): AxiosPromise<S3PaginationDto> {
            return DocumentSpaceControllerApiFp(configuration).listObjects(space, continuation, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads a file to a Document Space
         * @summary Uploads a file to a Document Space
         * @param {string} space 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(space: string, file?: any, options?: any): AxiosPromise<{ [key: string]: string; }> {
            return DocumentSpaceControllerApiFp(configuration).upload(space, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentSpaceControllerApi - interface
 * @export
 * @interface DocumentSpaceControllerApi
 */
export interface DocumentSpaceControllerApiInterface {
    /**
     * Deletes file from a space
     * @summary Deletes from a Document Space
     * @param {string} space 
     * @param {string} keyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    _delete(space: string, keyName: string, options?: any): AxiosPromise<object>;

    /**
     * Creates a Document Space
     * @summary Creates a Document Space
     * @param {DocumentSpaceInfoDto} documentSpaceInfoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    createSpace(documentSpaceInfoDto: DocumentSpaceInfoDto, options?: any): AxiosPromise<DocumentSpaceInfoDto>;

    /**
     * Deletes a Document Space
     * @summary Deletes a Document Space
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    deleteSpace(name: string, options?: any): AxiosPromise<object>;

    /**
     * Download a single file from a Document Space
     * @summary Download from a Document Space
     * @param {string} space 
     * @param {string} keyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    downloadFile(space: string, keyName: string, options?: any): AxiosPromise<any>;

    /**
     * Downloads multiple files from a space as a zip file
     * @summary Download multiple files from a Document Space
     * @param {string} space 
     * @param {Set<string>} keyNames 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    downloadFiles(space: string, keyNames: Set<string>, options?: any): AxiosPromise<object>;

    /**
     * 
     * @summary Retrieves all document space names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    getSpaces(options?: any): AxiosPromise<DocumentSpaceInfoDtoResponseWrapper>;

    /**
     * Gets files from a space. This is not a download
     * @summary Retrieves files from a space
     * @param {string} space 
     * @param {string} [continuation] the continuation token
     * @param {number} [limit] page limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    listObjects(space: string, continuation?: string, limit?: number, options?: any): AxiosPromise<S3PaginationDto>;

    /**
     * Uploads a file to a Document Space
     * @summary Uploads a file to a Document Space
     * @param {string} space 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApiInterface
     */
    upload(space: string, file?: any, options?: any): AxiosPromise<{ [key: string]: string; }>;

}

/**
 * DocumentSpaceControllerApi - object-oriented interface
 * @export
 * @class DocumentSpaceControllerApi
 * @extends {BaseAPI}
 */
export class DocumentSpaceControllerApi extends BaseAPI implements DocumentSpaceControllerApiInterface {
    /**
     * Deletes file from a space
     * @summary Deletes from a Document Space
     * @param {string} space 
     * @param {string} keyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public _delete(space: string, keyName: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration)._delete(space, keyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Document Space
     * @summary Creates a Document Space
     * @param {DocumentSpaceInfoDto} documentSpaceInfoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public createSpace(documentSpaceInfoDto: DocumentSpaceInfoDto, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).createSpace(documentSpaceInfoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Document Space
     * @summary Deletes a Document Space
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public deleteSpace(name: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).deleteSpace(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download a single file from a Document Space
     * @summary Download from a Document Space
     * @param {string} space 
     * @param {string} keyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public downloadFile(space: string, keyName: string, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).downloadFile(space, keyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downloads multiple files from a space as a zip file
     * @summary Download multiple files from a Document Space
     * @param {string} space 
     * @param {Set<string>} keyNames 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public downloadFiles(space: string, keyNames: Set<string>, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).downloadFiles(space, keyNames, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all document space names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public getSpaces(options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).getSpaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets files from a space. This is not a download
     * @summary Retrieves files from a space
     * @param {string} space 
     * @param {string} [continuation] the continuation token
     * @param {number} [limit] page limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public listObjects(space: string, continuation?: string, limit?: number, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).listObjects(space, continuation, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads a file to a Document Space
     * @summary Uploads a file to a Document Space
     * @param {string} space 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSpaceControllerApi
     */
    public upload(space: string, file?: any, options?: any) {
        return DocumentSpaceControllerApiFp(this.configuration).upload(space, file, options).then((request) => request(this.axios, this.basePath));
    }
}
