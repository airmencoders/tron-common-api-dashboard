/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { Flight } from '../models';
// @ts-ignore
import { Group } from '../models';
// @ts-ignore
import { OrganizationDto } from '../models';
// @ts-ignore
import { OtherUsaf } from '../models';
// @ts-ignore
import { Squadron } from '../models';
// @ts-ignore
import { Wing } from '../models';
/**
 * FlightControllerApi - axios parameter creator
 * @export
 */
export const FlightControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds member(s) to a FLIGHT
         * @summary Add member(s) to a FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFlightMembers: async (id: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addFlightMembers.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling addFlightMembers.');
            }
            const localVarPath = `/v1/flight/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds one or more FLIGHT entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more FLIGHT entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFlights: async (organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling addNewFlights.');
            }
            const localVarPath = `/v1/flight/flights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new USAF FLIGHT organization
         * @summary Adds a new USAF FLIGHT organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFlight: async (organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling createNewFlight.');
            }
            const localVarPath = `/v1/flight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing FLIGHT
         * @summary Deletes an existing FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlight: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteFlight.');
            }
            const localVarPath = `/v1/flight/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a member(s) from the FLIGHT
         * @summary Deletes a member(s) from the FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlightMembers: async (id: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteFlightMembers.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling deleteFlightMembers.');
            }
            const localVarPath = `/v1/flight/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF WING
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFlightTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/flight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a USAF FLIGHT organization by ID
         * @summary Retrieves a USAF FLIGHT organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFlightById.');
            }
            const localVarPath = `/v1/flight/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing FLIGHT\'s attributes.  Non-person/organization fields can be updated using this manner.
         * @summary Updates an existing FLIGHT\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFlight: async (id: string, requestBody: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchFlight.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling patchFlight.');
            }
            const localVarPath = `/v1/flight/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing FLIGHT
         * @summary Updates an existing FLIGHT
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFlight: async (id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateFlight.');
            }
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling updateFlight.');
            }
            const localVarPath = `/v1/flight/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlightControllerApi - functional programming interface
 * @export
 */
export const FlightControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds member(s) to a FLIGHT
         * @summary Add member(s) to a FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFlightMembers(id: string, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).addFlightMembers(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds one or more FLIGHT entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more FLIGHT entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new USAF FLIGHT organization
         * @summary Adds a new USAF FLIGHT organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing FLIGHT
         * @summary Deletes an existing FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFlight(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).deleteFlight(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a member(s) from the FLIGHT
         * @summary Deletes a member(s) from the FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFlightMembers(id: string, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).deleteFlightMembers(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF WING
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFlightTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).getAllFlightTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a USAF FLIGHT organization by ID
         * @summary Retrieves a USAF FLIGHT organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).getFlightById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing FLIGHT\'s attributes.  Non-person/organization fields can be updated using this manner.
         * @summary Updates an existing FLIGHT\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFlight(id: string, requestBody: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).patchFlight(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing FLIGHT
         * @summary Updates an existing FLIGHT
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFlight(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await FlightControllerApiAxiosParamCreator(configuration).updateFlight(id, organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FlightControllerApi - factory interface
 * @export
 */
export const FlightControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds member(s) to a FLIGHT
         * @summary Add member(s) to a FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFlightMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return FlightControllerApiFp(configuration).addFlightMembers(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds one or more FLIGHT entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more FLIGHT entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): AxiosPromise<OrganizationDto> {
            return FlightControllerApiFp(configuration).addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new USAF FLIGHT organization
         * @summary Adds a new USAF FLIGHT organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto> {
            return FlightControllerApiFp(configuration).createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing FLIGHT
         * @summary Deletes an existing FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlight(id: string, options?: any): AxiosPromise<void> {
            return FlightControllerApiFp(configuration).deleteFlight(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a member(s) from the FLIGHT
         * @summary Deletes a member(s) from the FLIGHT
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlightMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return FlightControllerApiFp(configuration).deleteFlightMembers(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF WING
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFlightTypes(options?: any): AxiosPromise<OrganizationDto> {
            return FlightControllerApiFp(configuration).getAllFlightTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a USAF FLIGHT organization by ID
         * @summary Retrieves a USAF FLIGHT organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightById(id: string, options?: any): AxiosPromise<OrganizationDto> {
            return FlightControllerApiFp(configuration).getFlightById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing FLIGHT\'s attributes.  Non-person/organization fields can be updated using this manner.
         * @summary Updates an existing FLIGHT\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFlight(id: string, requestBody: { [key: string]: string; }, options?: any): AxiosPromise<OrganizationDto> {
            return FlightControllerApiFp(configuration).patchFlight(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing FLIGHT
         * @summary Updates an existing FLIGHT
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFlight(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto> {
            return FlightControllerApiFp(configuration).updateFlight(id, organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlightControllerApi - interface
 * @export
 * @interface FlightControllerApi
 */
export interface FlightControllerApiInterface {
    /**
     * Adds member(s) to a FLIGHT
     * @summary Add member(s) to a FLIGHT
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    addFlightMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void>;

    /**
     * Adds one or more FLIGHT entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * @summary Adds one or more FLIGHT entities
     * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Adds a new USAF FLIGHT organization
     * @summary Adds a new USAF FLIGHT organization
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Deletes an existing FLIGHT
     * @summary Deletes an existing FLIGHT
     * @param {string} id UUID of the host organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    deleteFlight(id: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a member(s) from the FLIGHT
     * @summary Deletes a member(s) from the FLIGHT
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    deleteFlightMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void>;

    /**
     * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
     * @summary Retrieves all organizations of type USAF WING
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    getAllFlightTypes(options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Retrieves a USAF FLIGHT organization by ID
     * @summary Retrieves a USAF FLIGHT organization by ID
     * @param {string} id UUID of the organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    getFlightById(id: string, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Updates an existing FLIGHT\'s attributes.  Non-person/organization fields can be updated using this manner.
     * @summary Updates an existing FLIGHT\'s attributes
     * @param {string} id UUID of the host organization record
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    patchFlight(id: string, requestBody: { [key: string]: string; }, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Updates an existing FLIGHT
     * @summary Updates an existing FLIGHT
     * @param {string} id UUID of the organization record
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApiInterface
     */
    updateFlight(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto>;

}

/**
 * FlightControllerApi - object-oriented interface
 * @export
 * @class FlightControllerApi
 * @extends {BaseAPI}
 */
export class FlightControllerApi extends BaseAPI implements FlightControllerApiInterface {
    /**
     * Adds member(s) to a FLIGHT
     * @summary Add member(s) to a FLIGHT
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public addFlightMembers(id: string, requestBody: Array<string>, options?: any) {
        return FlightControllerApiFp(this.configuration).addFlightMembers(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds one or more FLIGHT entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * @summary Adds one or more FLIGHT entities
     * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any) {
        return FlightControllerApiFp(this.configuration).addNewFlights(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new USAF FLIGHT organization
     * @summary Adds a new USAF FLIGHT organization
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any) {
        return FlightControllerApiFp(this.configuration).createNewFlight(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing FLIGHT
     * @summary Deletes an existing FLIGHT
     * @param {string} id UUID of the host organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public deleteFlight(id: string, options?: any) {
        return FlightControllerApiFp(this.configuration).deleteFlight(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a member(s) from the FLIGHT
     * @summary Deletes a member(s) from the FLIGHT
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public deleteFlightMembers(id: string, requestBody: Array<string>, options?: any) {
        return FlightControllerApiFp(this.configuration).deleteFlightMembers(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
     * @summary Retrieves all organizations of type USAF WING
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public getAllFlightTypes(options?: any) {
        return FlightControllerApiFp(this.configuration).getAllFlightTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a USAF FLIGHT organization by ID
     * @summary Retrieves a USAF FLIGHT organization by ID
     * @param {string} id UUID of the organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public getFlightById(id: string, options?: any) {
        return FlightControllerApiFp(this.configuration).getFlightById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing FLIGHT\'s attributes.  Non-person/organization fields can be updated using this manner.
     * @summary Updates an existing FLIGHT\'s attributes
     * @param {string} id UUID of the host organization record
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public patchFlight(id: string, requestBody: { [key: string]: string; }, options?: any) {
        return FlightControllerApiFp(this.configuration).patchFlight(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing FLIGHT
     * @summary Updates an existing FLIGHT
     * @param {string} id UUID of the organization record
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightControllerApi
     */
    public updateFlight(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any) {
        return FlightControllerApiFp(this.configuration).updateFlight(id, organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }
}
