/* tslint:disable */
/* eslint-disable */
/**
 * TRON Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExceptionResponse } from '../models';
// @ts-ignore
import { Flight } from '../models';
// @ts-ignore
import { Group } from '../models';
// @ts-ignore
import { OrganizationDto } from '../models';
// @ts-ignore
import { OtherUsaf } from '../models';
// @ts-ignore
import { Squadron } from '../models';
// @ts-ignore
import { Wing } from '../models';
/**
 * SquadronControllerApi - axios parameter creator
 * @export
 */
export const SquadronControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds one or more SQUADRON entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more SQUADRON entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSquadrons: async (organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling addNewSquadrons.');
            }
            const localVarPath = `/v1/squadron/squadrons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds member(s) to a SQUADRON
         * @summary Add member(s) to a SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSquadronMembers: async (id: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addSquadronMembers.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling addSquadronMembers.');
            }
            const localVarPath = `/v1/squadron/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new USAF SQUADRON organization
         * @summary Adds a new USAF SQUADRON organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSquadron: async (organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling createNewSquadron.');
            }
            const localVarPath = `/v1/squadron`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing SQUADRON
         * @summary Deletes an existing SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSquadron: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSquadron.');
            }
            const localVarPath = `/v1/squadron/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a member(s) from the SQUADRON
         * @summary Deletes a member(s) from the SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSquadronMembers: async (id: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSquadronMembers.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling deleteSquadronMembers.');
            }
            const localVarPath = `/v1/squadron/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF SQUADRON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSquadronTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/squadron`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a USAF SQUADRON organization by ID
         * @summary Retrieves a USAF SQUADRON organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSquadronById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSquadronById.');
            }
            const localVarPath = `/v1/squadron/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing SQUADRON\'s attributes
         * @summary Updates an existing SQUADRON\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSquadron: async (id: string, requestBody: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchSquadron.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling patchSquadron.');
            }
            const localVarPath = `/v1/squadron/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing SQUADRON
         * @summary Updates an existing SQUADRON
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSquadron: async (id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSquadron.');
            }
            // verify required parameter 'organizationDtoFlightGroupOtherUsafSquadronWing' is not null or undefined
            if (organizationDtoFlightGroupOtherUsafSquadronWing === null || organizationDtoFlightGroupOtherUsafSquadronWing === undefined) {
                throw new RequiredError('organizationDtoFlightGroupOtherUsafSquadronWing','Required parameter organizationDtoFlightGroupOtherUsafSquadronWing was null or undefined when calling updateSquadron.');
            }
            const localVarPath = `/v1/squadron/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof organizationDtoFlightGroupOtherUsafSquadronWing !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(organizationDtoFlightGroupOtherUsafSquadronWing !== undefined ? organizationDtoFlightGroupOtherUsafSquadronWing : {})
                : (organizationDtoFlightGroupOtherUsafSquadronWing || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SquadronControllerApi - functional programming interface
 * @export
 */
export const SquadronControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds one or more SQUADRON entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more SQUADRON entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds member(s) to a SQUADRON
         * @summary Add member(s) to a SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSquadronMembers(id: string, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).addSquadronMembers(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new USAF SQUADRON organization
         * @summary Adds a new USAF SQUADRON organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing SQUADRON
         * @summary Deletes an existing SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSquadron(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).deleteSquadron(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a member(s) from the SQUADRON
         * @summary Deletes a member(s) from the SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSquadronMembers(id: string, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).deleteSquadronMembers(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF SQUADRON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSquadronTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).getAllSquadronTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a USAF SQUADRON organization by ID
         * @summary Retrieves a USAF SQUADRON organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSquadronById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).getSquadronById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing SQUADRON\'s attributes
         * @summary Updates an existing SQUADRON\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSquadron(id: string, requestBody: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).patchSquadron(id, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing SQUADRON
         * @summary Updates an existing SQUADRON
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSquadron(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDto>> {
            const localVarAxiosArgs = await SquadronControllerApiAxiosParamCreator(configuration).updateSquadron(id, organizationDtoFlightGroupOtherUsafSquadronWing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SquadronControllerApi - factory interface
 * @export
 */
export const SquadronControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds one or more SQUADRON entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
         * @summary Adds one or more SQUADRON entities
         * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): AxiosPromise<OrganizationDto> {
            return SquadronControllerApiFp(configuration).addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds member(s) to a SQUADRON
         * @summary Add member(s) to a SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSquadronMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return SquadronControllerApiFp(configuration).addSquadronMembers(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new USAF SQUADRON organization
         * @summary Adds a new USAF SQUADRON organization
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto> {
            return SquadronControllerApiFp(configuration).createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing SQUADRON
         * @summary Deletes an existing SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSquadron(id: string, options?: any): AxiosPromise<void> {
            return SquadronControllerApiFp(configuration).deleteSquadron(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a member(s) from the SQUADRON
         * @summary Deletes a member(s) from the SQUADRON
         * @param {string} id UUID of the host organization record
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSquadronMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return SquadronControllerApiFp(configuration).deleteSquadronMembers(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
         * @summary Retrieves all organizations of type USAF SQUADRON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSquadronTypes(options?: any): AxiosPromise<OrganizationDto> {
            return SquadronControllerApiFp(configuration).getAllSquadronTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a USAF SQUADRON organization by ID
         * @summary Retrieves a USAF SQUADRON organization by ID
         * @param {string} id UUID of the organization record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSquadronById(id: string, options?: any): AxiosPromise<OrganizationDto> {
            return SquadronControllerApiFp(configuration).getSquadronById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing SQUADRON\'s attributes
         * @summary Updates an existing SQUADRON\'s attributes
         * @param {string} id UUID of the host organization record
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSquadron(id: string, requestBody: { [key: string]: string; }, options?: any): AxiosPromise<OrganizationDto> {
            return SquadronControllerApiFp(configuration).patchSquadron(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing SQUADRON
         * @summary Updates an existing SQUADRON
         * @param {string} id UUID of the organization record
         * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSquadron(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto> {
            return SquadronControllerApiFp(configuration).updateSquadron(id, organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SquadronControllerApi - interface
 * @export
 * @interface SquadronControllerApi
 */
export interface SquadronControllerApiInterface {
    /**
     * Adds one or more SQUADRON entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * @summary Adds one or more SQUADRON entities
     * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Adds member(s) to a SQUADRON
     * @summary Add member(s) to a SQUADRON
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    addSquadronMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void>;

    /**
     * Adds a new USAF SQUADRON organization
     * @summary Adds a new USAF SQUADRON organization
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Deletes an existing SQUADRON
     * @summary Deletes an existing SQUADRON
     * @param {string} id UUID of the host organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    deleteSquadron(id: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a member(s) from the SQUADRON
     * @summary Deletes a member(s) from the SQUADRON
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    deleteSquadronMembers(id: string, requestBody: Array<string>, options?: any): AxiosPromise<void>;

    /**
     * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
     * @summary Retrieves all organizations of type USAF SQUADRON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    getAllSquadronTypes(options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Retrieves a USAF SQUADRON organization by ID
     * @summary Retrieves a USAF SQUADRON organization by ID
     * @param {string} id UUID of the organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    getSquadronById(id: string, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Updates an existing SQUADRON\'s attributes
     * @summary Updates an existing SQUADRON\'s attributes
     * @param {string} id UUID of the host organization record
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    patchSquadron(id: string, requestBody: { [key: string]: string; }, options?: any): AxiosPromise<OrganizationDto>;

    /**
     * Updates an existing SQUADRON
     * @summary Updates an existing SQUADRON
     * @param {string} id UUID of the organization record
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApiInterface
     */
    updateSquadron(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any): AxiosPromise<OrganizationDto>;

}

/**
 * SquadronControllerApi - object-oriented interface
 * @export
 * @class SquadronControllerApi
 * @extends {BaseAPI}
 */
export class SquadronControllerApi extends BaseAPI implements SquadronControllerApiInterface {
    /**
     * Adds one or more SQUADRON entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.
     * @summary Adds one or more SQUADRON entities
     * @param {Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing: Array<OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing>, options?: any) {
        return SquadronControllerApiFp(this.configuration).addNewSquadrons(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds member(s) to a SQUADRON
     * @summary Add member(s) to a SQUADRON
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public addSquadronMembers(id: string, requestBody: Array<string>, options?: any) {
        return SquadronControllerApiFp(this.configuration).addSquadronMembers(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new USAF SQUADRON organization
     * @summary Adds a new USAF SQUADRON organization
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any) {
        return SquadronControllerApiFp(this.configuration).createNewSquadron(organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing SQUADRON
     * @summary Deletes an existing SQUADRON
     * @param {string} id UUID of the host organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public deleteSquadron(id: string, options?: any) {
        return SquadronControllerApiFp(this.configuration).deleteSquadron(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a member(s) from the SQUADRON
     * @summary Deletes a member(s) from the SQUADRON
     * @param {string} id UUID of the host organization record
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public deleteSquadronMembers(id: string, requestBody: Array<string>, options?: any) {
        return SquadronControllerApiFp(this.configuration).deleteSquadronMembers(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all USAF WING organizations.  No other parameters allowed, use \'/organization\' endpoint to allow more options.
     * @summary Retrieves all organizations of type USAF SQUADRON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public getAllSquadronTypes(options?: any) {
        return SquadronControllerApiFp(this.configuration).getAllSquadronTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a USAF SQUADRON organization by ID
     * @summary Retrieves a USAF SQUADRON organization by ID
     * @param {string} id UUID of the organization record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public getSquadronById(id: string, options?: any) {
        return SquadronControllerApiFp(this.configuration).getSquadronById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing SQUADRON\'s attributes
     * @summary Updates an existing SQUADRON\'s attributes
     * @param {string} id UUID of the host organization record
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public patchSquadron(id: string, requestBody: { [key: string]: string; }, options?: any) {
        return SquadronControllerApiFp(this.configuration).patchSquadron(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing SQUADRON
     * @summary Updates an existing SQUADRON
     * @param {string} id UUID of the organization record
     * @param {OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing} organizationDtoFlightGroupOtherUsafSquadronWing 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquadronControllerApi
     */
    public updateSquadron(id: string, organizationDtoFlightGroupOtherUsafSquadronWing: OrganizationDto | Flight | Group | OtherUsaf | Squadron | Wing, options?: any) {
        return SquadronControllerApiFp(this.configuration).updateSquadron(id, organizationDtoFlightGroupOtherUsafSquadronWing, options).then((request) => request(this.axios, this.basePath));
    }
}
