{
  "openapi": "3.0.1",
  "info": {
    "title": "TRON Common API",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/v2/scratch/users/{id}": {
      "put": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Edits an existing Scratch Space user information",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "editScratchUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scratch User Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchStorageUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Operation Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageUserDto"
                }
              }
            }
          },
          "404": {
            "description": "User id not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "Scratch User Email Address is already is use",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Scratch Storage object or malformed user UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Deletes a scratch user",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "deleteScratchUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Scratch User Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Operation Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageUserDto"
                }
              }
            }
          },
          "404": {
            "description": "User id not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed user UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{id}": {
      "put": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Edit existing scratch space app information (its name)",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "editExistingAppEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "App Info Changed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          },
          "404": {
            "description": "Application ID not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request body / app name already exists or appId is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "App Name is already is use",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Deletes this application from the Common API registry (removes from scratch space use)",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "deleteExistingAppEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application ID not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "AppId is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "App Removed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person/{id}": {
      "get": {
        "tags": [
          "person-controller"
        ],
        "summary": "Retrieves a person by ID",
        "description": "Retrieves a person by ID",
        "operationId": "getPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "memberships",
            "in": "query",
            "description": "Whether to include this person's organization memberships in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "leaderships",
            "in": "query",
            "description": "Whether to include the organization ids this person is the leader of in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "person-controller"
        ],
        "summary": "Updates an existing person",
        "description": "Updates an existing person",
        "operationId": "updatePerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "person-controller"
        ],
        "summary": "Deletes an existing person",
        "description": "Deletes an existing person",
        "operationId": "deletePerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "person-controller"
        ],
        "summary": "Patches an existing person",
        "description": "Patches an existing person",
        "operationId": "patchPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person ID to patch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "description": "Patched person",
                "example": "[ {'op':'add','path':'/hello','value':'world'} ]",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/JsonPatchStringArrayValue"
                  },
                  {
                    "$ref": "#/components/schemas/JsonPatchStringValue"
                  },
                  {
                    "$ref": "#/components/schemas/JsonPatchObjectValue"
                  },
                  {
                    "$ref": "#/components/schemas/JsonPatchObjectArrayValue"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person/self/{id}": {
      "put": {
        "tags": [
          "person-controller"
        ],
        "summary": "Allows a Person to update their own existing record.",
        "description": "The email from the updated Person record must match the email in the authenticated user's JWT, otherwise this action will be rejected.",
        "operationId": "selfUpdatePerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Mismatch in email between updated Person record and user's JWT)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/{id}": {
      "get": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Retrieves an organization by ID",
        "description": "Retrieves an organization by ID",
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "flatten",
            "in": "query",
            "description": "Whether to flatten out all attached members and organizations contained therein",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "people",
            "in": "query",
            "description": "Comma-separated string list of fields to include in Person type sub-fields. Example: people=id,firstName,lastName",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "organizations",
            "in": "query",
            "description": "Comma-separated string list of fields to include in Organizational type sub-fields. Example: organizations=id,name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request or malformed UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Updates an existing organization",
        "description": "Updates an existing organization",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Deletes an existing organization",
        "description": "Deletes an existing organization",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Patches an existing organization",
        "description": "Patches an existing organization",
        "operationId": "jsonPatchOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID to patch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/JsonPatchStringArrayValue"
                    },
                    {
                      "$ref": "#/components/schemas/JsonPatchStringValue"
                    },
                    {
                      "$ref": "#/components/schemas/JsonPatchObjectValue"
                    },
                    {
                      "$ref": "#/components/schemas/JsonPatchObjectArrayValue"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dashboard-users/{id}": {
      "get": {
        "tags": [
          "dashboard-user-controller"
        ],
        "summary": "Retrieves a dashboard user by ID",
        "description": "Retrieves a dashboard user by ID",
        "operationId": "getDashboardUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard User ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "dashboard-user-controller"
        ],
        "summary": "Updates an existing dashboard user",
        "description": "Updates an existing dashboard user",
        "operationId": "updateDashboardUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard User ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardUserDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dashboard-user-controller"
        ],
        "summary": "Deletes an existing person",
        "description": "Deletes an existing person",
        "operationId": "deleteDashboardUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dashboard ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/{id}": {
      "get": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Returns the details for an App Source",
        "description": "Requires DASHBOARD_ADMIN or APP_SOURCE_ADMIN rights.",
        "operationId": "getAppSourceDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested App Source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Updates the details for an App Source",
        "description": "Requires DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN  of given App Id. Admin users can also be managed via this request method.  Emails for app source admins to a given App Source UUID will be implicitly added as new  DashboardUsers with the APP_SOURCE_ADMIN privilege.  Conversely a PUT that takes away an email that was there before  will be deleted as a DashboardUser if that email address does not have any other privileges in the system or its an  app source admin to some other app source application.",
        "operationId": "updateAppSourceDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source id to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSourceDetailsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Requested App Source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Request Body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Deletes the App Source",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "deleteAppSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "App Source Removed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "App Source Id not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-client/{id}": {
      "get": {
        "tags": [
          "app-client-controller"
        ],
        "summary": "Get an App Client's Information",
        "description": "Get an App Client by its UUID. Requires DASHBOARD_ADMIN or be an App Client Developer of that UUID.",
        "operationId": "getAppClientRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientUserDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource with that ID doesn't exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester isn't a DASHBOARD_ADMIN or an App Client Developer of this App Client",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "app-client-controller"
        ],
        "summary": "Updates an existing Application Client",
        "description": "Updates an existing Application Client. Requires DASHBOARD_ADMIN access to change any attribute,or be APP_CLIENT_DEVELOPER role for app client of given UUID to be able to manage change App Client Developers - any of fields changed as APP_CLIENT_DEVELOPER will not be changed.",
        "operationId": "updateAppClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Client ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppClientUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "app-client-controller"
        ],
        "summary": "Deletes an App Client",
        "description": "Deletes an existing App Client. Requires DASHBOARD_ADMIN access.",
        "operationId": "deleteAppClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Client ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientUserDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/events/replay-events": {
      "post": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Retrieves all ledger entries from specified event count(s) and event types(s)",
        "description": "Simply provide a list of type EventInfoDto containing the event types and the LAST event count received for that event. The returned list will contain, as its start point, the point in time at which the oldest of those event types(s)/event count(s) occurred at - the remainder of that list will be event entries containing only events specified in the request body. Note the event count(s) provided should be equal to the actual count received from Common.  This endpoint will know to return events from that count + 1.",
        "operationId": "getEventsSinceCountAndTypeWrapped",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "List of events and counts to rewind to and playback",
                "items": {
                  "$ref": "#/components/schemas/EventInfoDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request - malformed date/time",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExceptionResponse"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PubSubLedgerEntryDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person/persons": {
      "post": {
        "tags": [
          "person-controller"
        ],
        "summary": "Add one or more members to the database",
        "description": "Adds one or more person entities - returns that same array of input persons with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then no new persons will have been committed to the database (if one entity fails, the entire operation fails). The return error message will list the offending UUID or other data that caused the error.",
        "operationId": "addPersonsWrapped",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Array of persons to add",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PersonDto"
                    },
                    {
                      "$ref": "#/components/schemas/Airman"
                    },
                    {
                      "$ref": "#/components/schemas/CoastGuardsman"
                    },
                    {
                      "$ref": "#/components/schemas/Marine"
                    },
                    {
                      "$ref": "#/components/schemas/Sailor"
                    },
                    {
                      "$ref": "#/components/schemas/Soldier"
                    },
                    {
                      "$ref": "#/components/schemas/Spaceman"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDtoResponseWrapper"
                }
              }
            }
          },
          "409": {
            "description": "A person already exists with the id provided",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDtoResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad data or validation error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person/find": {
      "post": {
        "tags": [
          "person-controller"
        ],
        "summary": "Retrieves a person by email or dodid",
        "description": "Retrieves a person using a single identifying property.",
        "operationId": "findPersonBy",
        "parameters": [
          {
            "name": "memberships",
            "in": "query",
            "description": "Whether to include this person's organization memberships in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "leaderships",
            "in": "query",
            "description": "Whether to include the organization ids this person is the leader of in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonFindDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person/filter": {
      "post": {
        "tags": [
          "person-controller"
        ],
        "summary": "Retrieves persons filtered",
        "description": "Retrieves filtered list of persons",
        "operationId": "filterPerson",
        "parameters": [
          {
            "name": "memberships",
            "in": "query",
            "description": "Whether to include this person's organization memberships in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "leaderships",
            "in": "query",
            "description": "Whether to include the organization ids this person is the leader of in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": "20"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request - most likely bad field or value given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "headers": {
              "link": {
                "description": "Contains the appropriate pagination links if application. If no pagination query params given, then no pagination links will exist. Possible rel values include: first, last, prev, next",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDtoPaginationResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/organizations": {
      "post": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Adds one or more organization entities",
        "description": "Adds one or more organization entities - returns that same array of input organizations with their assigned UUIDs. If the request does NOT return 201 (Created) because of an error (see other return codes), then any new organizations up to that organization that caused the failure will have been committed (but none thereafter)The return error message will list the offending UUID or other data that caused the error.",
        "operationId": "addNewOrganizationsWrapped",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrganizationDto"
                    },
                    {
                      "$ref": "#/components/schemas/Flight"
                    },
                    {
                      "$ref": "#/components/schemas/Group"
                    },
                    {
                      "$ref": "#/components/schemas/OtherUsaf"
                    },
                    {
                      "$ref": "#/components/schemas/Squadron"
                    },
                    {
                      "$ref": "#/components/schemas/Wing"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDtoResponseWrapper"
                }
              }
            }
          },
          "409": {
            "description": "Bad Request / One of the supplied organizations contained a UUID that already exists or other duplicate data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad data or validation error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/filter": {
      "post": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Retrieves organizations filtered",
        "description": "Retrieves filtered list of organizations",
        "operationId": "filterOrganizations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": "20"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "link": {
                "description": "Contains the appropriate pagination links if application. If no pagination query params given, then no pagination links will exist. Possible rel values include: first, last, prev, next",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDtoPaginationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - most likely bad field or value given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions": {
      "get": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Retrieves all registered subscriptions",
        "description": "Retrieves all subscriptions",
        "operationId": "getAllSubscriptionsWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberDtoResponseWrapper"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Adds/updates a subscription",
        "description": "Adds a new subscription, or updates an existing subscription",
        "operationId": "createSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/{appId}/{keyName}/jsonize": {
      "post": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Treats the key's value as JSON and returns the JsonPath query invoked onto that JSON structure. Returns JSON string matching the specified JSON Path",
        "description": "App ID is the UUID of the owning application",
        "operationId": "getKeyValueByKeyNameAsJson",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "keyName",
            "in": "path",
            "description": "Key Name to look up",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain;charset=UTF-8": {
              "schema": {
                "type": "string",
                "description": "Jayway JsonPath spec string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application ID / Key name not valid or found / JSON path spec not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Application UUID / Value cannot be jsonized / Unable to serialize response to JSON",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Treats the key's value as JSON and attempts to update a portion of it from given JSON Patch spec with provided value.  Returns NO_CONTENT response on successful update.",
        "description": "App ID is the UUID of the owning application",
        "operationId": "patchKeyValuePairAsJson",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "keyName",
            "in": "path",
            "description": "Key Name to look up",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchValuePatchJsonDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Application UUID / Value cannot be jsonized / Bad JSON Path / Unable to serialize response to JSON",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application ID / Key name not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/users": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Gets the entire table of Scratch Space users (ID, email...)",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "getAllUsersWrapped",
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageUserDtoResponseWrapper"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Adds a new Scratch Space user by their P1 email address",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "addNewScratchUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchStorageUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "Scratch User UUID or email address is already is use",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "New user added operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Scratch Storage object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Gets the entire table of Scratch Storage apps that are registered with Common API if requesteris a dashboard admin, otherwise returns the scratch space apps the requester is a scratch admin for",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "getScratchSpaceAppsWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDtoResponseWrapper"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Adds a new Scratch Strorage consuming app name to the Common API scratch storage space",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "postNewScratchSpaceApp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request body or app name already exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "App Registered OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          },
          "409": {
            "description": "App UUID or App Name is already is use",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Retrieves all key-value pairs for all scratch space consuming apps",
        "description": "Requires request to be under DASHBOARD_ADMIN privileges",
        "operationId": "getAllKeyValuePairsWrapped",
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageEntryDtoResponseWrapper"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Adds or updates a key-value pair for a given App Id",
        "description": "SCRATCH_WRITE privileges are required for the requester for the given App Id",
        "operationId": "setKeyValuePair",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchStorageEntryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Write / Update action forbidden - no WRITE privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageEntryDto"
                }
              }
            }
          },
          "404": {
            "description": "Application ID / Key name not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Request Body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person/person-jwt": {
      "post": {
        "tags": [
          "person-controller"
        ],
        "summary": "Adds a person using info from P1 JWT",
        "operationId": "createPersonFromJwt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformJwtDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists with the id provided",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/person": {
      "get": {
        "tags": [
          "person-controller"
        ],
        "summary": "Retrieves all persons",
        "description": "Retrieves all persons  with pagination information",
        "operationId": "getPersonsWrapped",
        "parameters": [
          {
            "name": "memberships",
            "in": "query",
            "description": "Whether to include this person's organization memberships in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "leaderships",
            "in": "query",
            "description": "Whether to include the organization ids this person is the leader of in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": "20"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "link": {
                "description": "Contains the appropriate pagination links if application. If no pagination query params given, then no pagination links will exist. Possible rel values include: first, last, prev, next",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDtoPaginationResponseWrapper"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "person-controller"
        ],
        "summary": "Adds a person",
        "description": "Adds a person.  Query Ranks controller for available Ranks and Branches. If a given Rank or Branch is invalid, the Person will be created with rank 'Unknown' and branch 'Other'",
        "operationId": "createPerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists with the id provided",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization": {
      "get": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Retrieves all organizations",
        "description": "Retrieves all organizations.  Optionally can provide 'type' parameter (e.g. 'WING') to filter by Organization type and/or 'branch' parameter to filter by branch of service (e.g 'USAF'). If neither parameter is given, then no filters are applied and request returns all Organizations.  Optionally can also provide 'search' parameter to search on organization names within the result set (case in-sensitive).",
        "operationId": "getOrganizationsWrapped",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Unit type to filter on",
            "required": false,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "SQUADRON",
                    "GROUP",
                    "FLIGHT",
                    "WING",
                    "OTHER_USAF",
                    "DIVISION",
                    "REGIMENT",
                    "BRIGADE",
                    "BATTALION",
                    "COMPANY",
                    "TROOP",
                    "OTHER_USA",
                    "OTHER_USN",
                    "OTHER_USSF",
                    "OTHER_USCG",
                    "OTHER_USMC",
                    "ORGANIZATION"
                  ]
                }
              }
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Branch type to filter on",
            "required": false,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "OTHER",
                    "USA",
                    "USAF",
                    "USMC",
                    "USN",
                    "USSF",
                    "USCG"
                  ]
                }
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Case insensitive search string for org name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "people",
            "in": "query",
            "description": "Comma-separated string list to include in Person type sub-fields. Example: people=id,firstName,lastName",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "organizations",
            "in": "query",
            "description": "Comma-separated string list to include in Organization type sub-fields. Example: organizations=id,name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": "20"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "link": {
                "description": "Contains the appropriate pagination links if application. If no pagination query params given, then no pagination links will exist. Possible rel values include: first, last, prev, next",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDtoPaginationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - likely due to invalid unit type or branch of service specified",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Adds an organization",
        "description": "Adds an organization",
        "operationId": "createOrganization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "203": {
            "description": "Successful - Entity Field Authority denied access to some fields",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists with the id provided",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dashboard-users": {
      "get": {
        "tags": [
          "dashboard-user-controller"
        ],
        "summary": "Retrieves all Dashboard Users",
        "description": "Retrieves all Dashboard Users",
        "operationId": "getAllDashboardUsersWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardUserDtoResponseWrapper"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dashboard-user-controller"
        ],
        "summary": "Adds a Dashboard User",
        "description": "Adds a Dashboard User",
        "operationId": "addDashboardUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Resource already exists with the email provided",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/app-clients": {
      "get": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Gets a list of the available app clients (their names and UUIDs)",
        "operationId": "getAvailableAppClientsWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientSummaryDtoResponseWrapper"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Adds an app source's endpoint to app client privilege relationship",
        "description": "Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.",
        "operationId": "addClientToEndpointPriv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppEndPointPrivDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "An Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "App Source/End Point/App Client not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Record Added/Updated OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source": {
      "get": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Gets all App Sources.",
        "description": "Requires DASHBOARD_ADMIN rights",
        "operationId": "getAppSourcesWrapped",
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDtoResponseWrapper"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Creates an App Source including App Client permissions.",
        "description": "Requires DASHBOARD_ADMIN rights",
        "operationId": "createAppSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSourceDetailsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "No DASHBOARD_ADMIN privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Request Body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful creation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-client": {
      "get": {
        "tags": [
          "app-client-controller"
        ],
        "summary": "Retrieves all application client user information",
        "description": "Retrieves application client user information.  Requires Dashboard Admin access or App Client Developer.",
        "operationId": "getAppClientUsersWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientUserDtoResponseWrapped"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "app-client-controller"
        ],
        "summary": "Adds an App Client",
        "description": "Adds a App Client User. Requires DASHBOARD_ADMIN access.",
        "operationId": "createAppClientUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppClientUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Resource already exists with the name provided",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{id}/user": {
      "patch": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Adds a user privilege to this app's data",
        "description": "Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID",
        "operationId": "addUserPriv",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScratchStorageAppUserPrivDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "App Priv Added OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          },
          "404": {
            "description": "Application ID not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request body / app name already exists or appId is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "This app/user/priv combo already exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges, or no SCRATCH_ADMIN privileges for given app id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{id}/implicitRead": {
      "patch": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Sets or un-sets the app's implicit read field",
        "description": "Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID",
        "operationId": "setImplicitReadSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "priv",
            "in": "query",
            "description": "Application User-Priv Object",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Application ID not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "App Modified OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges, or no SCRATCH_ADMIN privileges for given app id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed appId or query parameter",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{id}/aclMode": {
      "patch": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Sets or un-sets the app's ACL mode setting",
        "description": "Requester has to have DASHBOARD_ADMIN rights, or have SCRATCH_ADMIN rights for given app ID",
        "operationId": "setAclModeSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "aclMode",
            "in": "query",
            "description": "Value of the ACL Mode setting - true or false",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Application ID not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "App Modified OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges, or no SCRATCH_ADMIN privileges for given app id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed appId or query parameter",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/{id}/subordinates": {
      "delete": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Remove subordinate organizations from an organization",
        "description": "Removes subordinate orgs from an organization",
        "operationId": "removeSubordinateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the host organization record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "UUID(s) of subordinate organizations",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Not Authorized - do not have privilege to edit this field",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Provided org UUID(s) was/were invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Host organization UUID was invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Add subordinate organizations to an organization",
        "description": "Adds subordinate orgs to an organization",
        "operationId": "addSubordinateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the host organization record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "UUID(s) of subordinate organizations",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Not Authorized - do not have privilege to edit this field",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Provided org UUID(s) was/were invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Host organization UUID was invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/{id}/members": {
      "delete": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Deletes a member(s) from the organization",
        "description": "Deletes a member(s) from an organization",
        "operationId": "deleteOrganizationMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the organization to modify",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "UUID(s) of the member(s) to remove",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Provided organization UUID was invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized - do not have privilege to edit this field",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Provided person UUID(s) was/were invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Add member(s) to an organization",
        "description": "Adds member(s) to an organization",
        "operationId": "addOrganizationMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the organization record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "primary",
            "in": "query",
            "description": "Whether to make the organization the primary organization for the user",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "UUID(s) of the member(s) to add",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Not Authorized - do not have privilege to edit this field",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "404": {
            "description": "A organization UUID was invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Provided person UUID(s) was/were invalid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/admins/{id}": {
      "delete": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Deletes a single app source admin by email address from provided App Source",
        "description": "Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.",
        "operationId": "removeAppSourceAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "App Source Id not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Admin Removed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Adds single app source admin by email address to provided App Source",
        "description": "Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.  Request payload is a DashboardUserDto, but only needed/required fields are the email address.",
        "operationId": "addAppSourceAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Admin Added OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App Source Id not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/events/replay": {
      "get": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Retrieves all ledger entries from specified date/time regardless of event type",
        "description": "Date/time needs to be in zulu time with format yyyy-MM-ddTHH:mm:ss",
        "operationId": "getEventSinceDateWrapped",
        "parameters": [
          {
            "name": "sinceDateTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request - malformed date/time",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PubSubLedgerEntryDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/events/latest": {
      "get": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Retrieves most current counts for each event type",
        "description": "Retrieves latest counts for each event type in a key-value pair object",
        "operationId": "getLatestCountsWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventInfoDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/{appId}": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Retrieves all key-value pairs for a single app",
        "description": "App ID is the UUID of the owning application. Note if app is in ACL mode, then this endpointwill not work unless requester is a SCRATCH_ADMIN - since ACL mode restricts read/write on a key bykey basis",
        "operationId": "getAllKeyValuePairsForAppIdWrapped",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Malformed Application UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScratchStorageEntryDtoResponseWrapper"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application ID not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Deletes all key-value pairs for a given App Id",
        "description": "SCRATCH_WRITE privileges are required for the requester for the given App Id",
        "operationId": "deleteAllKeyValuePairsForAppId",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Write / Update action forbidden - no WRITE privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageEntryDto"
                }
              }
            }
          },
          "404": {
            "description": "Application ID not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed Request Body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/users/privs": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Gets all SCRATCH space privileges available",
        "description": "Gets all the SCRATCH space privileges so that privilege names can be mapped to their IDs",
        "operationId": "getScratchPrivsWrapped",
        "responses": {
          "200": {
            "description": "Operation Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PrivilegeDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{appId}/keys": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Retrieves all keys for for a single app",
        "description": "App ID is the UUID of the owning application. Note if app is in ACL mode, then this endpointwill not work unless requester is a SCRATCH_ADMIN - since ACL mode restricts read/write on a key bykey basis",
        "operationId": "getAllKeysForAppIdWrapped",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Malformed Application UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application ID not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GenericStringArrayResponseWrapper"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/privilege": {
      "get": {
        "tags": [
          "privilege-controller"
        ],
        "summary": "Retrieves all Privilege information",
        "description": "Retrieves Privilege information",
        "operationId": "getPrivilegesWrapped",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PrivilegeDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/kpi/summary": {
      "get": {
        "tags": [
          "kpi-controller"
        ],
        "summary": "Retrieves all KPI information",
        "description": "Retrieves all KPI information between two dates.",
        "operationId": "getKpiSummary",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include in UTC.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "yyyy-MM-dd"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include in UTC. Will default to the current date if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "yyyy-MM-dd"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible reasons include: \n\nStart Date required.\n\nStart date must be before or equal to End Date.\n\nStart date cannot be in the future (there would be no data).",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/KpiSummaryDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/kpi/series": {
      "get": {
        "tags": [
          "kpi-controller"
        ],
        "summary": "Retrieves previously recorded KPIs.",
        "description": "Retrieves previously recorded KPIs. The KPIs will be reported in weekly increments. Monday is the start of the week and Sunday is the end of the week.",
        "operationId": "getKpiSeries",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include in UTC.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "yyyy-MM-dd"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include in UTC. Will default to the previous week from today if not provided.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "yyyy-MM-dd"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Possible reasons include: \n\nStart Date required.\n\nStart date must be before or equal to End Date.\n\nStart date cannot be set to within the current week or in the future (there would be no data).",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/KpiSummaryDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-client/privs": {
      "get": {
        "tags": [
          "app-client-controller"
        ],
        "summary": "Gets all available privileges available for an app-client",
        "description": "Gets all the app client privileges so that privilege names can be mapped to their IDs. Must be a DASHBOARD_ADMIN or APP_CLIENT_DEVELOPER",
        "operationId": "getClientTypePrivsWrapped",
        "responses": {
          "200": {
            "description": "Operation Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PrivilegeDtoResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/v2/version": {
      "get": {
        "tags": [
          "app-version-controller"
        ],
        "summary": "Retrieves current running application version",
        "description": "The version is the first 8-characters of the SHA-1 commit hash of the master branch that this version was compiled from",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppVersionInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/userinfo/existing-person": {
      "get": {
        "tags": [
          "user-info-controller"
        ],
        "summary": "Returns person record matching email for existing logged in user jwt",
        "operationId": "getExistingPersonRecord",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/userinfo": {
      "get": {
        "tags": [
          "user-info-controller"
        ],
        "summary": "Retrieves the user information from the jwt",
        "description": "Retrieves user information",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Retrieves a registered subscription",
        "description": "Retrieve a subscription by its UUID",
        "operationId": "getSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberDto"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subscriber-controller"
        ],
        "summary": "Deletes a subscription",
        "description": "Deletes a subscription by its UUID",
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberDto"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/{appId}/{keyName}": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Retrieves a single key-value pair for for a single app",
        "description": "App ID is the UUID of the owning application",
        "operationId": "getKeyValueByKeyName",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "keyName",
            "in": "path",
            "description": "Key Name to look up",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Malformed Application UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageEntryDto"
                }
              }
            }
          },
          "404": {
            "description": "Application ID / Key name not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{appId}": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Gets a single Scratch Storage app's record that is registered with Common API",
        "description": "Requester has to have DASHBOARD_ADMIN rights or have SCRATCH_ADMIN rights for given app ID.",
        "operationId": "getScratchAppById",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges, or no SCRATCH_ADMIN privilege for given app ID.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/self": {
      "get": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Gets all Scratch Storage apps that the current Authorized User is a user of",
        "description": "Each Scratch Storage App returned will only contain user privileges for the Authorized User. It will not contain the privileges of other users.",
        "operationId": "getScratchSpaceAppsByAuthorizedUser",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/rank/{branch}/{abbreviation}": {
      "get": {
        "tags": [
          "rank-controller"
        ],
        "summary": "Retrieves information for a particular rank",
        "description": "Retrieves information for a particular rank",
        "operationId": "getRank",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "abbreviation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Resource not found"
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Rank"
                }
              }
            }
          }
        }
      }
    },
    "/v2/rank/{branch}": {
      "get": {
        "tags": [
          "rank-controller"
        ],
        "summary": "Retrieves all ranks for a particular branch",
        "description": "Retrieves all ranks for a particular branch",
        "operationId": "getRanks",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Resource not found"
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rank"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/rank": {
      "get": {
        "tags": [
          "rank-controller"
        ],
        "summary": "Retrieves all ranks",
        "description": "Retrieves all ranks",
        "operationId": "getRanks_1",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rank"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/puckboard/test": {
      "get": {
        "tags": [
          "puckboard-etl-controller"
        ],
        "operationId": "testPuckboardComms",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/puckboard/extract": {
      "get": {
        "tags": [
          "puckboard-etl-controller"
        ],
        "operationId": "getPuckboardData",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/metrics/endpoint/{id}": {
      "get": {
        "tags": [
          "metrics-controller"
        ],
        "summary": "Retrieves all stored metrics values for given endpoint",
        "description": "Retrieves all stored metric values for given endpoint",
        "operationId": "getAllMetricsForEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Endpoint Id to search with",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege or must be an Admin of the endpoint's App Source)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Rquest (Start date and end date are both required. Start date must be before end date)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointMetricDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/metrics/count/{id}/endpoint": {
      "get": {
        "tags": [
          "metrics-controller"
        ],
        "summary": "Retrieves sum of stored metric values for given endpoint path on given app source",
        "description": "Retrieves sum of stored metric values for given endpoint path on given app source for each app client",
        "operationId": "getCountOfMetricsForEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source Id to search with",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Endpoint Path to search with",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "Endpoint Request Method Type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "PATCH",
                "DELETE",
                "OPTIONS",
                "TRACE"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppEndpointCountMetricDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege or must be an Admin of the App Source)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Rquest (Start date, end date, and path are all required. Start date must be before end date)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/metrics/count/{id}/appclient": {
      "get": {
        "tags": [
          "metrics-controller"
        ],
        "summary": "Retrieves sum of stored metric values for given app client name on given app source",
        "description": "Retrieves sum of stored metric values for given app client name on given app source for each endpoint",
        "operationId": "getCountOfMetricsForAppClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source Id to search with",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "App Client Name to search with",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege or must be an Admin of the App Source)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Rquest (Start date, end date, and name are all required. Start date must be before end date)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientCountMetricDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/metrics/count/{id}": {
      "get": {
        "tags": [
          "metrics-controller"
        ],
        "summary": "Retrieves sum of stored metric values for given app source",
        "description": "Retrieves sum of stored metric values for given app source for each endppoint and for each app client",
        "operationId": "getCountOfMetricsForAppSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source Id to search with",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceCountMetricDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege or must be an Admin of the App Source)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Rquest (Start date and end date are both required. Start date must be before end date)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/metrics/appsource/{id}": {
      "get": {
        "tags": [
          "metrics-controller"
        ],
        "summary": "Retrieves all stored metrics values for given app source",
        "description": "Retrieves all stored metric values for given app source",
        "operationId": "getAllMetricsForAppSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source Id to search with",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Earliest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Latest date to include",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege or must be an Admin of the App Source)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceMetricDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Rquest (Start date and end date are both required. Start date must be before end date)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/logs/{id}": {
      "get": {
        "tags": [
          "http-logs-controller"
        ],
        "summary": "Retrieves the full record of a particular request",
        "description": "Must have DASHBOARD_ADMIN privilege to access. This detailed info includes the request/response bodies (if present)",
        "operationId": "getHttpLogDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpLogEntryDetailsDto"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges (requires DASHBOARD_ADMIN)",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/logs": {
      "get": {
        "tags": [
          "http-logs-controller"
        ],
        "summary": "Retrieves a subset of the server http trace logs from a specified date",
        "description": "Must have DASHBOARD_ADMIN privilege to access.  Date time given is in the format 'yyyy-MM-ddTHH:mm:ss' and should be in UTC time. This date time parameter is required.  This is also a pageable interface (using page and size query params).",
        "operationId": "getHttpLogs",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The date/time from which to query from - format yyyy-MM-dd'T'HH:mm:ss - in UTC",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "HTTP method to filter on, e.g. GET, POST, etc",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Username to filter on",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "HTTP response status to sort on",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "userAgentContains",
            "in": "query",
            "description": "Filter by user agent containing given string",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "requestedUrlContains",
            "in": "query",
            "description": "Filter by requested url containing given string",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": "20"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "link": {
                "description": "Contains the appropriate pagination links if application. If no pagination query params given, then no pagination links will exist. Possible rel values include: first, last, prev, next",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpLogDtoPaginationResponseWrapper"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges (requires DASHBOARD_ADMIN)",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/logfile/{fileName}": {
      "get": {
        "tags": [
          "logfile-controller"
        ],
        "summary": "Retrieves a logfile for download",
        "description": "Retrieves a logfile for download",
        "operationId": "getLogfile",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "I/O error involving file",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/logfile": {
      "get": {
        "tags": [
          "logfile-controller"
        ],
        "summary": "Retrieves all logfiles info",
        "description": "Retrieves all logfiles available for download",
        "operationId": "getLogfileInfo",
        "responses": {
          "403": {
            "description": "Forbidden (Requires DASHBOARD_ADMIN privilege)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogfileDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/dashboard-users/self": {
      "get": {
        "tags": [
          "dashboard-user-controller"
        ],
        "summary": "Retrieves the currently authorized dashboard user",
        "description": "Retrieves the authorized dashboard user",
        "operationId": "getSelfDashboardUser",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardUserDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (user does not exist)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/spec/{appId}": {
      "get": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Gets a copy of the openapispec file for the app source",
        "operationId": "getSpecFile",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "App Source or API Specification file not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.oai.openapi": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/spec/endpoint-priv/{endpointPrivId}": {
      "get": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Gets a copy of the openapispec file for the app source related to the endpoint",
        "operationId": "getSpecFileByEndpointPriv",
        "parameters": [
          {
            "name": "endpointPrivId",
            "in": "path",
            "description": "App Endpoint Privilege UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "App Source or API Specification file not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.oai.openapi": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/{appId}/key/{key}": {
      "delete": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Deletes a key-value pair for a given App Id",
        "description": "SCRATCH_WRITE privileges are required for the requester for the given App Id",
        "operationId": "deleteKeyValuePair",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key name of the key-value pair to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Malformed request body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Write / Update action forbidden - no WRITE privileges",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageEntryDto"
                }
              }
            }
          },
          "404": {
            "description": "Application ID / Key name not valid or found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/scratch/apps/{id}/user/{appPrivIdEntry}": {
      "delete": {
        "tags": [
          "scratch-storage-controller"
        ],
        "summary": "Removes a user privilege from this app's data",
        "description": "Requester has to have DASHBOARD_ADMIN rights",
        "operationId": "removeUserPriv",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "appPrivIdEntry",
            "in": "path",
            "description": "UUID of the User-Priv set to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Application ID not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request body / app name already exists or appId is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "No DASHBOARD_ADMIN privileges, or no SCRATCH_ADMIN privileges for given app id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "App Priv Removed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/{id}/parent": {
      "delete": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Deletes a parent from a subordinate organization",
        "description": "Deletes/clears out the parent org with no org",
        "operationId": "deleteOrgParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID to delete the parent from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Organization not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized - do not have privilege to edit this field",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organization/{id}/leader": {
      "delete": {
        "tags": [
          "organization-controller"
        ],
        "summary": "Deletes a leader from an organization",
        "description": "Deletes/clears out the leader position with no one",
        "operationId": "deleteOrgLeader",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID to delete the leader from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Organization not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized - do not have privilege to edit this field",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/app-clients/{appId}/{privId}": {
      "delete": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Deletes an app source's endpoint to app client privilege relationship",
        "description": "Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.",
        "operationId": "removeClientToEndPointPriv",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "privId",
            "in": "path",
            "description": "App Source Endpoint Privilege UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "An Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "Privilege Removed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App Source/End Point/App Client not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/app-source/app-clients/all/{id}": {
      "delete": {
        "tags": [
          "app-source-controller"
        ],
        "summary": "Deletes ALL app client privileges from provided App Source.  No App Clients will be able to use this app source's endpoints.",
        "description": "Requester has to have DASHBOARD_ADMIN rights or be APP_SOURCE_ADMIN of given App Id.",
        "operationId": "removeAllAppClientPrivs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App Source UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Id is malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "200": {
            "description": "All App Client Privileges Removed OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppSourceDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App Source not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ScratchStorageUserDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        }
      },
      "ExceptionResponse": {
        "required": [
          "error",
          "path",
          "reason",
          "status",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "description": "Field will only exist if there are validation errors",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "required": [
          "code",
          "defaultMessage",
          "fieldName",
          "objectName",
          "rejectedValue"
        ],
        "type": "object",
        "properties": {
          "defaultMessage": {
            "type": "string"
          },
          "objectName": {
            "type": "string"
          },
          "rejectedValue": {
            "type": "object"
          },
          "code": {
            "type": "string"
          },
          "fieldName": {
            "type": "string"
          }
        },
        "description": "Field will only exist if there are validation errors",
        "nullable": true
      },
      "PrivilegeDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PrivilegeIdPair": {
        "type": "object",
        "properties": {
          "userPrivPairId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "priv": {
            "$ref": "#/components/schemas/PrivilegeDto"
          }
        }
      },
      "ScratchStorageAppRegistryDto": {
        "required": [
          "appName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "appName": {
            "type": "string"
          },
          "appHasImplicitRead": {
            "type": "boolean"
          },
          "aclMode": {
            "type": "boolean"
          },
          "userPrivs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWithPrivs"
            }
          }
        }
      },
      "UserWithPrivs": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "emailAddress": {
            "type": "string"
          },
          "privs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeIdPair"
            }
          }
        }
      },
      "Airman": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonDto"
          },
          {
            "type": "object",
            "properties": {
              "armsUnitCode": {
                "type": "string",
                "nullable": true
              },
              "armsHarmCode": {
                "type": "string",
                "nullable": true
              },
              "afsc": {
                "type": "string",
                "nullable": true
              },
              "etsDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "ptDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "imds": {
                "type": "string",
                "nullable": true
              },
              "unit": {
                "type": "string",
                "nullable": true
              },
              "wing": {
                "type": "string",
                "nullable": true
              },
              "gp": {
                "type": "string",
                "nullable": true
              },
              "squadron": {
                "type": "string",
                "nullable": true
              },
              "wc": {
                "type": "string",
                "nullable": true
              },
              "go81": {
                "type": "string",
                "nullable": true
              },
              "dor": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "deros": {
                "type": "string",
                "nullable": true
              },
              "admin": {
                "type": "boolean"
              },
              "fltChief": {
                "type": "string",
                "nullable": true
              },
              "approved": {
                "type": "boolean"
              },
              "manNumber": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CoastGuardsman": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonDto"
          }
        ]
      },
      "Marine": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonDto"
          }
        ]
      },
      "PersonDto": {
        "title": "Person",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "firstName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "middleName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "lastName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "title": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "dodid": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "type": "string"
          },
          "branch": {
            "type": "string",
            "enum": [
              "OTHER",
              "USA",
              "USAF",
              "USMC",
              "USN",
              "USSF",
              "USCG"
            ]
          },
          "phone": {
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "address": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "dutyPhone": {
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "dutyTitle": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Must be null or not blank",
            "nullable": true
          },
          "primaryOrganizationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organizationMemberships": {
            "uniqueItems": true,
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            }
          },
          "organizationLeaderships": {
            "uniqueItems": true,
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            }
          }
        },
        "discriminator": {
          "propertyName": "branch",
          "mapping": {
            "USAF": "#/components/schemas/Airman",
            "USCG": "#/components/schemas/CoastGuardsman",
            "USMC": "#/components/schemas/Marine",
            "USN": "#/components/schemas/Sailor",
            "USA": "#/components/schemas/Soldier",
            "USSF": "#/components/schemas/Spaceman",
            "OTHER": "#/components/schemas/PersonDto"
          }
        }
      },
      "Sailor": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonDto"
          }
        ]
      },
      "Soldier": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonDto"
          }
        ]
      },
      "Spaceman": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonDto"
          }
        ]
      },
      "Flight": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationDto"
          },
          {
            "type": "object",
            "properties": {
              "pas": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "Group": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationDto"
          },
          {
            "type": "object",
            "properties": {
              "pas": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "OrganizationDto": {
        "title": "Organization",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "leader": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "parentOrganization": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "subordinateOrganizations": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "orgType": {
            "type": "string",
            "enum": [
              "SQUADRON",
              "GROUP",
              "FLIGHT",
              "WING",
              "OTHER_USAF",
              "DIVISION",
              "REGIMENT",
              "BRIGADE",
              "BATTALION",
              "COMPANY",
              "TROOP",
              "OTHER_USA",
              "OTHER_USN",
              "OTHER_USSF",
              "OTHER_USCG",
              "OTHER_USMC",
              "ORGANIZATION"
            ]
          },
          "branchType": {
            "type": "string",
            "enum": [
              "OTHER",
              "USA",
              "USAF",
              "USMC",
              "USN",
              "USSF",
              "USCG"
            ]
          }
        },
        "discriminator": {
          "propertyName": "orgType",
          "mapping": {
            "FLIGHT": "#/components/schemas/Flight",
            "GROUP": "#/components/schemas/Group",
            "OTHER_USAF": "#/components/schemas/OtherUsaf",
            "SQUADRON": "#/components/schemas/Squadron",
            "WING": "#/components/schemas/Wing",
            "ORGANIZATION": "#/components/schemas/OrganizationDto"
          }
        }
      },
      "OtherUsaf": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationDto"
          }
        ]
      },
      "Squadron": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationDto"
          },
          {
            "type": "object",
            "properties": {
              "pas": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "Wing": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationDto"
          },
          {
            "type": "object",
            "properties": {
              "pas": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "DashboardUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "email": {
            "type": "string"
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeDto"
            }
          }
        },
        "description": "Admin To Remove Email"
      },
      "AppClientUserPrivDto": {
        "required": [
          "appClientUser",
          "appEndpoint"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "appClientUser": {
            "type": "string",
            "format": "uuid"
          },
          "appClientUserName": {
            "type": "string"
          },
          "appEndpoint": {
            "type": "string",
            "format": "uuid"
          },
          "privilege": {
            "type": "string"
          }
        }
      },
      "AppEndpointDto": {
        "required": [
          "path",
          "requestType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "requestType": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          }
        }
      },
      "AppSourceDetailsDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "appSourcePath": {
            "type": "string"
          },
          "endpointCount": {
            "type": "integer",
            "format": "int32"
          },
          "reportStatus": {
            "type": "boolean"
          },
          "clientCount": {
            "type": "integer",
            "format": "int32"
          },
          "healthUrl": {
            "type": "string"
          },
          "appSourceAdminUserEmails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "appClients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppClientUserPrivDto"
            }
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppEndpointDto"
            }
          },
          "throttleEnabled": {
            "type": "boolean"
          },
          "throttleRequestCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AppClientUserDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeDto"
            }
          },
          "appClientDeveloperEmails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "clusterUrl": {
            "type": "string"
          }
        }
      },
      "EventInfoDto": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "enum": [
              "PERSON_CHANGE",
              "PERSON_DELETE",
              "ORGANIZATION_CHANGE",
              "ORGANIZATION_DELETE",
              "PERSON_ORG_ADD",
              "PERSON_ORG_REMOVE",
              "SUB_ORG_ADD",
              "SUB_ORG_REMOVE"
            ]
          },
          "eventCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PubSubLedgerEntryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "countForEventType": {
            "type": "integer",
            "format": "int64"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "PERSON_CHANGE",
              "PERSON_DELETE",
              "ORGANIZATION_CHANGE",
              "ORGANIZATION_DELETE",
              "PERSON_ORG_ADD",
              "PERSON_ORG_REMOVE",
              "SUB_ORG_ADD",
              "SUB_ORG_REMOVE"
            ]
          },
          "data": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PubSubLedgerEntryDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PubSubLedgerEntryDto"
            }
          }
        }
      },
      "PersonDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonDto"
            }
          }
        }
      },
      "PersonFindDto": {
        "required": [
          "findType",
          "value"
        ],
        "type": "object",
        "properties": {
          "findType": {
            "type": "string",
            "enum": [
              "EMAIL",
              "DODID"
            ]
          },
          "value": {
            "type": "string"
          }
        },
        "description": "The information to find a person by"
      },
      "FilterCondition": {
        "required": [
          "operator"
        ],
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "description": "The operation to perform for the condition",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "GREATER_THAN",
              "LESS_THAN",
              "LIKE",
              "NOT_LIKE",
              "STARTS_WITH",
              "ENDS_WITH",
              "IN"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to perform the operation against"
          },
          "values": {
            "type": "array",
            "description": "The values to perform the operation against (only used when operator set to IN)",
            "items": {
              "type": "string",
              "description": "The values to perform the operation against (only used when operator set to IN)"
            }
          }
        },
        "description": "The list of conditions that must be fulfilled"
      },
      "FilterCriteria": {
        "required": [
          "conditions",
          "field"
        ],
        "type": "object",
        "properties": {
          "relationType": {
            "type": "string",
            "description": "The relationship between the conditions. Will default to use AND if none provided. Has no effect if only one condition is given",
            "enum": [
              "OR",
              "AND"
            ]
          },
          "field": {
            "type": "string",
            "description": "the name of the field to compare against"
          },
          "conditions": {
            "type": "array",
            "description": "The list of conditions that must be fulfilled",
            "items": {
              "$ref": "#/components/schemas/FilterCondition"
            }
          }
        }
      },
      "FilterDto": {
        "required": [
          "filterCriteria"
        ],
        "type": "object",
        "properties": {
          "filterCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterCriteria"
            }
          }
        },
        "description": "The conditions used to filter"
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLink"
          }
        }
      },
      "PaginationLink": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "first": {
            "type": "string"
          }
        }
      },
      "PersonDtoPaginationResponseWrapper": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "OrganizationDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDto"
            }
          }
        }
      },
      "OrganizationDtoPaginationResponseWrapper": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SubscriberDto": {
        "required": [
          "appClientUser",
          "subscribedEvent"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "appClientUser": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "subscribedEvent": {
            "type": "string",
            "enum": [
              "PERSON_CHANGE",
              "PERSON_DELETE",
              "ORGANIZATION_CHANGE",
              "ORGANIZATION_DELETE",
              "PERSON_ORG_ADD",
              "PERSON_ORG_REMOVE",
              "SUB_ORG_ADD",
              "SUB_ORG_REMOVE"
            ]
          },
          "subscriberAddress": {
            "type": "string"
          }
        }
      },
      "ScratchStorageEntryDto": {
        "required": [
          "appId",
          "key"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "appId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PlatformJwtDto": {
        "type": "object",
        "properties": {
          "affiliation": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "dod_id": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "family_name": {
            "type": "string"
          }
        },
        "description": "Person to create"
      },
      "AppEndPointPrivDto": {
        "type": "object",
        "properties": {
          "appSourceId": {
            "type": "string",
            "format": "uuid"
          },
          "appEndpointId": {
            "type": "string",
            "format": "uuid"
          },
          "appClientUserId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "description": "App Source UUID"
      },
      "JsonPatchStringArrayValue": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move",
              "test"
            ]
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JsonPatchStringValue": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move",
              "test"
            ]
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "JsonPatchObjectValue": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move",
              "test"
            ]
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "JsonPatchObjectArrayValue": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move",
              "test"
            ]
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ScratchValuePatchJsonDto": {
        "required": [
          "jsonPath"
        ],
        "type": "object",
        "properties": {
          "jsonPath": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Object specifying the json path to execute and the new value"
      },
      "ScratchStorageAppUserPrivDto": {
        "required": [
          "email",
          "privilegeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "email": {
            "type": "string"
          },
          "privilegeId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Application User-Priv Object"
      },
      "SubscriberDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberDto"
            }
          }
        }
      },
      "EventInfoDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfoDto"
            }
          }
        }
      },
      "ScratchStorageEntryDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScratchStorageEntryDto"
            }
          }
        }
      },
      "ScratchStorageUserDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScratchStorageUserDto"
            }
          }
        }
      },
      "PrivilegeDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeDto"
            }
          }
        }
      },
      "ScratchStorageAppRegistryDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScratchStorageAppRegistryDto"
            }
          }
        }
      },
      "GenericStringArrayResponseWrapper": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "KpiSummaryDto": {
        "required": [
          "appClientToAppSourceRequestCount",
          "appSourceCount",
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "averageLatencyForSuccessfulRequests": {
            "type": "number",
            "format": "double"
          },
          "appSourceCount": {
            "type": "integer",
            "format": "int64"
          },
          "appClientToAppSourceRequestCount": {
            "type": "integer",
            "format": "int64"
          },
          "uniqueVisitorCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVisitorCountDto"
            }
          }
        }
      },
      "UniqueVisitorCountDto": {
        "required": [
          "requestCount",
          "uniqueCount",
          "visitorType"
        ],
        "type": "object",
        "properties": {
          "visitorType": {
            "type": "string",
            "enum": [
              "DASHBOARD_USER",
              "APP_CLIENT"
            ]
          },
          "uniqueCount": {
            "type": "integer",
            "format": "int64"
          },
          "requestCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "KpiSummaryDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KpiSummaryDto"
            }
          }
        }
      },
      "DashboardUserDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardUserDto"
            }
          }
        }
      },
      "AppSourceDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "endpointCount": {
            "type": "integer",
            "format": "int32"
          },
          "clientCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AppSourceDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppSourceDto"
            }
          }
        }
      },
      "AppClientSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AppClientSummaryDtoResponseWrapper": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppClientSummaryDto"
            }
          }
        }
      },
      "AppClientUserDtoResponseWrapped": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppClientUserDto"
            }
          }
        }
      },
      "AppVersionInfoDto": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "UserInfoDto": {
        "type": "object",
        "properties": {
          "dodId": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "preferredUsername": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          },
          "affiliation": {
            "type": "string"
          }
        }
      },
      "Rank": {
        "type": "object",
        "properties": {
          "abbreviation": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "payGrade": {
            "type": "string"
          },
          "branchType": {
            "type": "string",
            "enum": [
              "OTHER",
              "USA",
              "USAF",
              "USMC",
              "USN",
              "USSF",
              "USCG"
            ]
          }
        }
      },
      "EndpointMetricDto": {
        "required": [
          "path",
          "requestType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "requestType": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterValueDto"
            }
          }
        }
      },
      "MeterValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "appClient": {
            "type": "string"
          },
          "metricName": {
            "type": "string"
          },
          "count": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AppEndpointCountMetricDto": {
        "required": [
          "path",
          "requestType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "requestType": {
            "type": "string"
          },
          "appSource": {
            "type": "string"
          },
          "appClients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountMetricDto"
            }
          }
        }
      },
      "CountMetricDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "sum": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AppClientCountMetricDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "appSource": {
            "type": "string"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointCountMetricDto"
            }
          }
        }
      },
      "EndpointCountMetricDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "sum": {
            "type": "number",
            "format": "double"
          },
          "method": {
            "type": "string"
          }
        }
      },
      "AppSourceCountMetricDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointCountMetricDto"
            }
          },
          "appClients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountMetricDto"
            }
          }
        }
      },
      "AppSourceMetricDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointMetricDto"
            }
          }
        }
      },
      "HttpLogEntryDetailsDto": {
        "type": "object",
        "properties": {
          "requestTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "requestedUrl": {
            "type": "string"
          },
          "requestBody": {
            "type": "string"
          },
          "remoteIp": {
            "type": "string"
          },
          "requestMethod": {
            "type": "string"
          },
          "responseBody": {
            "type": "string"
          },
          "requestHost": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          },
          "queryString": {
            "type": "string"
          },
          "timeTakenMs": {
            "type": "integer",
            "format": "int64"
          },
          "userName": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "HttpLogDtoPaginationResponseWrapper": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HttpLogEntryDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "HttpLogEntryDto": {
        "type": "object",
        "properties": {
          "requestHost": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "type": "string"
          },
          "requestedUrl": {
            "type": "string"
          },
          "timeTakenMs": {
            "type": "integer",
            "format": "int64"
          },
          "requestMethod": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          },
          "remoteIp": {
            "type": "string"
          },
          "requestTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "queryString": {
            "type": "string"
          }
        }
      },
      "LogfileDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "downloadUri": {
            "type": "string"
          }
        }
      },
      "AppClientUserDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "appClientDeveloperEmails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeDto"
            }
          },
          "appEndpointPrivs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppEndpointClientInfoDto"
            }
          },
          "name": {
            "type": "string"
          },
          "clusterUrl": {
            "type": "string"
          }
        }
      },
      "AppEndpointClientInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "appSourceName": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "basePath": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "OPTIONS",
              "TRACE"
            ]
          },
          "deleted": {
            "type": "boolean"
          },
          "appSourceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    }
  }
}